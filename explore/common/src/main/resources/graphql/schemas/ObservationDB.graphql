# Common fields shared by all asterisms
interface Asterism {
  # Asterism ID
  id: AsterismId!

  # Whether the asterism is deleted or present
  existence: Existence!

  # When set, overrides the default base position of the asterism
  explicitBase: Coordinates

  # All observations associated with the asterism.
  observations(
    # Program ID
    programId: ProgramId

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Observation!]!

  # All asterism targets
  targets(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Target!]!

  # The programs associated with the asterism.
  programs(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Program!]!
}

# Event sent when a new object is created or updated
type AsterismEdit implements Event {
  # Type of edit
  editType: EditType!

  # Edited object
  value: Asterism!
  id: Long!
}

# AsterismId id formatted as `a-(0|[1-9a-f][0-9a-f]*)`
scalar AsterismId

# Asterism and the programs with which they are associated
input AsterismProgramLinks {
  asterismIds: [AsterismId!]!
  programIds: [ProgramId!]!
}

# The `BigDecimal` scalar type represents signed fractional values with arbitrary precision.
scalar BigDecimal

type CatalogId {
  # Catalog name option
  name: CatalogName!

  # Catalog id string
  id: String!
}

# Catalog id consisting of catalog name and string identifier
input CatalogIdInput {
  name: CatalogName!
  id: String!
}

# Catalog name values
enum CatalogName {
  # CatalogName Simbad
  SIMBAD

  # CatalogName Horizon
  HORIZON

  # CatalogName Gaia
  GAIA
}

type Coordinates {
  # Right Ascension
  ra: RightAscension!

  # Declination
  dec: Declination!
}

# Absolute coordinates relative base epoch
input CoordinatesInput {
  ra: RightAscensionInput!
  dec: DeclinationInput!
}

# Default asterism parameters
input CreateDefaultAsterismInput {
  asterismId: AsterismId
  programIds: [ProgramId!]!
  explicitBase: CoordinatesInput

  # Targets to include in default asterism
  targetIds: [TargetId!]!
}

# Nonsidereal target parameters
input CreateNonsiderealInput {
  targetId: TargetId
  programIds: [ProgramId!]
  name: String!
  key: EphemerisKeyType!
  des: String!
  magnitudes: [MagnitudeInput!]
}

# Observation creation parameters
input CreateObservationInput {
  observationId: ObservationId
  programId: ProgramId!
  name: String
  asterismId: AsterismId
  status: ObsStatus
}

# Sidereal target parameters
input CreateSiderealInput {
  targetId: TargetId
  programIds: [ProgramId!]
  name: String!
  catalogId: CatalogIdInput
  ra: RightAscensionInput!
  dec: DeclinationInput!
  epoch: EpochString
  properMotion: ProperMotionInput
  radialVelocity: RadialVelocityInput
  parallax: ParallaxModelInput
  magnitudes: [MagnitudeInput!]
}

type Declination {
  # Declination in DD:MM:SS.SS format
  dms: DmsString!

  # Declination in signed degrees
  degrees: BigDecimal!

  # Declination in signed µas
  microarcseconds: Long!
}

# Decimal value in Declination
input DeclinationDecimalInput {
  # decimal value in associated units
  value: BigDecimal!

  # units for associated value
  units: DeclinationUnits!
}

# Declination, choose one of the available units
input DeclinationInput {
  microarcseconds: Long
  degrees: BigDecimal
  dms: DmsString
  fromLong: DeclinationLongInput
  fromDecimal: DeclinationDecimalInput
}

# Integral value in Declination
input DeclinationLongInput {
  # integral value in associated units
  value: Long!

  # units for associated value
  units: DeclinationUnits!
}

# Unit options for Declination values
enum DeclinationUnits {
  # DeclinationUnits Microarcseconds
  MICROARCSECONDS

  # DeclinationUnits Degrees
  DEGREES
}

# Default asterism
type DefaultAsterism implements Asterism {
  # Asterism ID
  id: AsterismId!

  # Whether the asterism is deleted or present
  existence: Existence!

  # When set, overrides the default base position of the asterism
  explicitBase: Coordinates

  # All observations associated with the asterism.
  observations(
    # Program ID
    programId: ProgramId

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Observation!]!

  # All asterism targets
  targets(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Target!]!

  # The programs associated with the asterism.
  programs(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Program!]!
}

# Target declination coordinate in format '[+/-]DD:MM:SS.sss'
scalar DmsString

type Duration {
  # Duration in µs
  microseconds: Long!

  # Duration in ms
  milliseconds: BigDecimal!

  # Duration in seconds
  seconds: BigDecimal!

  # Duration in minutes
  minutes: BigDecimal!

  # Duration in hours
  hours: BigDecimal!
}

# Default asterism edit
input EditDefaultAsterismInput {
  asterismId: AsterismId!
  existence: Existence
  explicitBase: CoordinatesInput

  # Targets to include in the default asterism
  targetIds: [TargetId!]
}

# Edit observation
input EditObservationInput {
  observationId: ObservationId!
  existence: Existence
  name: String
  status: ObsStatus
  asterismId: AsterismId
}

# Sidereal target edit parameters
input EditSiderealInput {
  targetId: TargetId!
  existence: Existence
  name: String
  catalogId: CatalogIdInput
  ra: RightAscensionInput
  dec: DeclinationInput
  epoch: EpochString
  properMotion: ProperMotionInput
  radialVelocity: RadialVelocityInput
  parallax: ParallaxModelInput

  # Replace all magnitudes with the provided values
  magnitudes: [MagnitudeInput!]

  # Update any listed magnitudes leaving unmentioned values unchanged
  modifyMagnitudes: [MagnitudeInput!]

  # Removes any listed magnitude values
  deleteMagnitudes: [MagnitudeBand!]
}

# Type of edit that triggered an event
enum EditType {
  # EditType Created
  CREATED

  # EditType Updated
  UPDATED
}

# Ephemeris key type options
enum EphemerisKeyType {
  # EphemerisKeyType Comet
  COMET

  # EphemerisKeyType AsteroidNew
  ASTEROID_NEW

  # EphemerisKeyType AsteroidOld
  ASTEROID_OLD

  # EphemerisKeyType MajorBody
  MAJOR_BODY

  # EphemerisKeyType UserSupplied
  USER_SUPPLIED
}

# Reference observation epoch in format '[JB]YYYY.YYY'
scalar EpochString

# Common fields shared by all events
interface Event {
  id: Long!
}

# State of being: either Deleted or Present
enum Existence {
  # Existence Present
  PRESENT

  # Existence Deleted
  DELETED
}

# Target right ascension coordinate in format 'HH:MM:SS.sss'
scalar HmsString

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Magnitude {
  # Magnitude value (unitless)
  value: BigDecimal!

  # Magnitude band
  band: MagnitudeBand!

  # Magnitude System
  system: MagnitudeSystem!
}

# Magnitude band
enum MagnitudeBand {
  # MagnitudeBand SloanU
  SLOAN_U

  # MagnitudeBand SloanG
  SLOAN_G

  # MagnitudeBand SloanR
  SLOAN_R

  # MagnitudeBand SloanI
  SLOAN_I

  # MagnitudeBand SloanZ
  SLOAN_Z

  # MagnitudeBand U
  U

  # MagnitudeBand B
  B

  # MagnitudeBand V
  V

  # MagnitudeBand Uc
  UC

  # MagnitudeBand R
  R

  # MagnitudeBand I
  I

  # MagnitudeBand Y
  Y

  # MagnitudeBand J
  J

  # MagnitudeBand H
  H

  # MagnitudeBand K
  K

  # MagnitudeBand L
  L

  # MagnitudeBand M
  M

  # MagnitudeBand N
  N

  # MagnitudeBand Q
  Q

  # MagnitudeBand Ap
  AP
}

# Magnitude description
input MagnitudeInput {
  value: BigDecimal!
  band: MagnitudeBand!
  error: BigDecimal
  system: MagnitudeSystem = VEGA
}

# Magnitude system
enum MagnitudeSystem {
  # MagnitudeSystem Vega
  VEGA

  # MagnitudeSystem AB
  AB

  # MagnitudeSystem Jy
  JY
}

type Mutation {
  createDefaultAsterism(
    # Default Asterism description
    input: CreateDefaultAsterismInput!
  ): DefaultAsterism
  updateDefaultAsterism(
    # Edit default asterism
    input: EditDefaultAsterismInput!
  ): DefaultAsterism!
  deleteAsterism(
    # Asterism ID
    asterismId: AsterismId!
  ): Asterism!
  undeleteAsterism(
    # Asterism ID
    asterismId: AsterismId!
  ): Asterism!
  createObservation(
    # Observation description
    input: CreateObservationInput!
  ): Observation
  updateObservation(
    # Edit observation
    input: EditObservationInput!
  ): Observation!
  deleteObservation(
    # Observation ID
    observationId: ObservationId!
  ): Observation!
  undeleteObservation(
    # Observation ID
    observationId: ObservationId!
  ): Observation!
  createNonsiderealTarget(
    # Nonsidereal target description
    input: CreateNonsiderealInput!
  ): Target
  createSiderealTarget(
    # Sidereal target description
    input: CreateSiderealInput!
  ): Target
  updateSiderealTarget(
    # Sidereal target edit
    input: EditSiderealInput!
  ): Target!
  deleteTarget(
    # Target ID
    targetId: TargetId!
  ): Target!
  undeleteTarget(
    # Target ID
    targetId: TargetId!
  ): Target!
  shareAsterismsWithPrograms(
    # Asterism/program links
    input: AsterismProgramLinks!
  ): [Asterism!]!
  unshareAsterismsWithPrograms(
    # Asterism/program links
    input: AsterismProgramLinks!
  ): [Asterism!]!
  shareTargetsWithObservations(
    # Target/observation links
    input: TargetObservationLinks!
  ): [Asterism!]!
  unshareTargetsWithObservations(
    # Target/observation links
    input: TargetObservationLinks!
  ): [Asterism!]!
  shareTargetsWithPrograms(
    # Target/program links
    input: TargetProgramLinks!
  ): [Target!]!
  unshareTargetsWithPrograms(
    # Target/program links
    input: TargetProgramLinks!
  ): [Target!]!
}

type Nonsidereal {
  # Human readable designation that discriminates among ephemeris keys of the same type.
  des: String!

  # Nonsidereal target lookup type.
  keyType: EphemerisKeyType!
}

type Observation {
  # Observation ID
  id: ObservationId!

  # Deleted or Present
  existence: Existence!

  # Observation name
  name: String

  # Observation status
  status: ObsStatus!

  # Observation planned time calculation.
  plannedTime: PlannedTimeSummary!

  # The program that contains this observation
  program(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Program!

  # The observation's asterism, if any
  asterism(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Asterism

  # The observation's targets, if any
  targets(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Target!]!
}

# Event sent when a new object is created or updated
type ObservationEdit implements Event {
  # Type of edit
  editType: EditType!

  # Edited object
  value: Observation!
  id: Long!
}

# ObservationId id formatted as `o-(0|[1-9a-f][0-9a-f]*)`
scalar ObservationId

# Observation status options
enum ObsStatus {
  # ObsStatus New
  NEW

  # ObsStatus Included
  INCLUDED

  # ObsStatus Proposed
  PROPOSED

  # ObsStatus Approved
  APPROVED

  # ObsStatus ForReview
  FOR_REVIEW

  # ObsStatus Ready
  READY

  # ObsStatus Ongoing
  ONGOING

  # ObsStatus Observed
  OBSERVED
}

type Parallax {
  # Parallax in microarcseconds
  microarcseconds: Long!

  # Parallax in milliarcseconds
  milliarcseconds: BigDecimal!
}

# Decimal value in Parallax
input ParallaxDecimalInput {
  # decimal value in associated units
  value: BigDecimal!

  # units for associated value
  units: ParallaxUnits!
}

# Integral value in Parallax
input ParallaxLongInput {
  # integral value in associated units
  value: Long!

  # units for associated value
  units: ParallaxUnits!
}

# Parallax, choose one of the available units
input ParallaxModelInput {
  microarcseconds: Long
  milliarcseconds: BigDecimal
  fromLong: ParallaxLongInput
  fromDecimal: ParallaxDecimalInput
}

# Unit options for parallax values
enum ParallaxUnits {
  # ParallaxUnits Microarcseconds
  MICROARCSECONDS

  # ParallaxUnits Milliarcseconds
  MILLIARCSECONDS
}

type PlannedTimeSummary {
  # The portion of planned time that will be charged
  pi: Duration!

  # The portion of planned time that will not be charged
  uncharged: Duration!

  # The total estimated execution time
  execution: Duration!
}

type Program {
  # Program ID
  id: ProgramId!

  # Deleted or Present
  existence: Existence!

  # Program name
  name: String

  # All asterisms associated with the program (needs pagination).
  asterisms(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Asterism!]!

  # All observations associated with the program (needs pagination).
  observations(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Observation!]!

  # All targets associated with the program (needs pagination).
  targets(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Target!]!

  # Program planned time calculation.
  plannedTime(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): PlannedTimeSummary!
}

# Event sent when a new object is created or updated
type ProgramEdit implements Event {
  # Type of edit
  editType: EditType!

  # Edited object
  value: Program!
  id: Long!
}

# ProgramId id formatted as `p-(0|[1-9a-f][0-9a-f]*)`
scalar ProgramId

type ProperMotion {
  # Proper motion in RA
  ra: ProperMotionRA!

  # Proper motion in declination
  dec: ProperMotionDeclination!
}

# Decimal value in ProperMotionComponent
input ProperMotionComponentDecimalInput {
  # decimal value in associated units
  value: BigDecimal!

  # units for associated value
  units: ProperMotionComponentUnits!
}

# Proper motion component, choose one of the available units
input ProperMotionComponentInput {
  microarcsecondsPerYear: Long
  milliarcsecondsPerYear: BigDecimal
  fromLong: ProperMotionComponentLongInput
  fromDecimal: ProperMotionComponentDecimalInput
}

# Integral value in ProperMotionComponent
input ProperMotionComponentLongInput {
  # integral value in associated units
  value: Long!

  # units for associated value
  units: ProperMotionComponentUnits!
}

# Unit options for proper motion components (RA and Dec)
enum ProperMotionComponentUnits {
  # ProperMotionComponentUnits MicroarcsecondsPerYear
  MICROARCSECONDS_PER_YEAR

  # ProperMotionComponentUnits MilliarcsecondsPerYear
  MILLIARCSECONDS_PER_YEAR
}

type ProperMotionDeclination {
  # Proper motion in properMotion μas/year
  microarcsecondsPerYear: Long!

  # Proper motion in properMotion mas/year
  milliarcsecondsPerYear: BigDecimal!
}

# Proper motion, choose one of the available units
input ProperMotionInput {
  ra: ProperMotionComponentInput!
  dec: ProperMotionComponentInput!
}

type ProperMotionRA {
  # Proper motion in properMotion μas/year
  microarcsecondsPerYear: Long!

  # Proper motion in properMotion mas/year
  milliarcsecondsPerYear: BigDecimal!
}

type Query {
  # Returns all asterisms associated with the given program.
  asterisms(
    # Program ID
    programId: ProgramId!

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Asterism!]!

  # Returns the asterism with the given id, if any.
  asterism(
    # Asterism ID
    asterismId: AsterismId!

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Asterism

  # Returns all observations associated with the given program.
  observations(
    # Program ID
    programId: ProgramId!

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Observation!]!

  # Returns the observation with the given id, if any.
  observation(
    # Observation ID
    observationId: ObservationId!

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Observation

  # Returns all programs (needs pagination).
  programs(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Program!]!

  # Returns the program with the given id, if any.
  program(
    # Program ID
    programId: ProgramId!

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Program

  # Return all targets associated with the given program.
  targets(
    # Program ID
    programId: ProgramId!

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Target!]!

  # Returns the target with the given id, if any.
  target(
    # Target ID
    targetId: TargetId!

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Target
}

type RadialVelocity {
  # Radial velocity in cm/s
  centimetersPerSecond: Long!

  # Radial velocity in m/s
  metersPerSecond: BigDecimal!

  # Radial velocity in km/s
  kilometersPerSecond: BigDecimal!
}

# Decimal value in RadialVelocity
input RadialVelocityDecimalInput {
  # decimal value in associated units
  value: BigDecimal!

  # units for associated value
  units: RadialVelocityUnits!
}

# Radial velocity, choose one of the available units
input RadialVelocityInput {
  centimetersPerSecond: Long
  metersPerSecond: BigDecimal
  kilometersPerSecond: BigDecimal
  fromLong: RadialVelocityLongInput
  fromDecimal: RadialVelocityDecimalInput
}

# Integral value in RadialVelocity
input RadialVelocityLongInput {
  # integral value in associated units
  value: Long!

  # units for associated value
  units: RadialVelocityUnits!
}

# Unit options for radial velocity values
enum RadialVelocityUnits {
  # RadialVelocityUnits CentimetersPerSecond
  CENTIMETERS_PER_SECOND

  # RadialVelocityUnits MetersPerSecond
  METERS_PER_SECOND

  # RadialVelocityUnits KilometersPerSecond
  KILOMETERS_PER_SECOND
}

type RightAscension {
  # Right Ascension (RA) in HH:MM:SS.SSS format
  hms: HmsString!

  # Right Ascension (RA) in hours
  hours: BigDecimal!

  # Right Ascension (RA) in degrees
  degrees: BigDecimal!

  # Right Ascension (RA) in µas
  microarcseconds: Long!
}

# Decimal value in RightAscension
input RightAscensionDecimalInput {
  # decimal value in associated units
  value: BigDecimal!

  # units for associated value
  units: RightAscensionUnits!
}

# Right Ascension, choose one of the available units
input RightAscensionInput {
  microarcseconds: Long
  degrees: BigDecimal
  hours: BigDecimal
  hms: HmsString
  fromLong: RightAscensionLongInput
  fromDecimal: RightAscensionDecimalInput
}

# Integral value in RightAscension
input RightAscensionLongInput {
  # integral value in associated units
  value: Long!

  # units for associated value
  units: RightAscensionUnits!
}

# Unit options for RightAscension values
enum RightAscensionUnits {
  # RightAscensionUnits Microarcseconds
  MICROARCSECONDS

  # RightAscensionUnits Degrees
  DEGREES

  # RightAscensionUnits Hours
  HOURS
}

type Sidereal {
  # Catalog id, if any, describing from where the information in this target was obtained
  catalogId: CatalogId

  # Coordinates at epoch
  coordinates: Coordinates!

  # Epoch, time of base observation
  epoch: EpochString!

  # Proper motion per year in right ascension and declination
  properMotion: ProperMotion

  # Radial velocity
  radialVelocity: RadialVelocity

  # Parallax
  parallax: Parallax
}

type Subscription {
  #
  # Subscribes to an event that is generated whenever a(n) asterism is
  # created or updated.  If a(n) asterism id is provided, the event is only
  # generated for edits to that particular asterism.  If a program id is
  # provided then the event must correspond to a(n) asterism referenced by
  # that program.
  #
  asterismEdit(
    # Asterism ID
    asterismId: AsterismId

    # Program ID
    programId: ProgramId
  ): AsterismEdit!

  #
  # Subscribes to an event that is generated whenever a(n) observation is
  # created or updated.  If a(n) observation id is provided, the event is only
  # generated for edits to that particular observation.  If a program id is
  # provided then the event must correspond to a(n) observation referenced by
  # that program.
  #
  observationEdit(
    # Observation ID
    observationId: ObservationId

    # Program ID
    programId: ProgramId
  ): ObservationEdit!

  #
  # Subscribes to an event that is generated whenever a program is created
  # or edited. A particular program id may be provided to limit events to
  # that program.
  #
  programEdit(
    # Program ID
    programId: ProgramId
  ): ProgramEdit!

  #
  # Subscribes to an event that is generated whenever a(n) target is
  # created or updated.  If a(n) target id is provided, the event is only
  # generated for edits to that particular target.  If a program id is
  # provided then the event must correspond to a(n) target referenced by
  # that program.
  #
  targetEdit(
    # Target ID
    targetId: TargetId

    # Program ID
    programId: ProgramId
  ): TargetEdit!
}

type Target {
  # Target id.
  id: TargetId!

  # Deleted or Present
  existence: Existence!

  # The asterisms associated with the target.
  asterisms(
    # Program ID
    programId: ProgramId

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Asterism!]!

  # The observations associated with the target.
  observations(
    # Program ID
    programId: ProgramId

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Observation!]!

  # The programs associated with the target.
  programs(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): [Program!]!

  # Target name.
  name: String!

  # Information required to find a target in the sky.
  tracking: Tracking!

  # Target magnitudes
  magnitudes: [Magnitude!]!
}

# Event sent when a new object is created or updated
type TargetEdit implements Event {
  # Type of edit
  editType: EditType!

  # Edited object
  value: Target!
  id: Long!
}

# TargetId id formatted as `t-(0|[1-9a-f][0-9a-f]*)`
scalar TargetId

# Targets and the observations with which they are associated
input TargetObservationLinks {
  targetIds: [TargetId!]!
  observationIds: [ObservationId!]!
}

# Targets and the programs with which they are associated
input TargetProgramLinks {
  targetIds: [TargetId!]!
  programIds: [ProgramId!]!
}

# Either Nonsidereal ephemeris lookup key or Sidereal proper motion.
union Tracking = Nonsidereal | Sidereal

