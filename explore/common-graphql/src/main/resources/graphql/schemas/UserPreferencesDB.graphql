schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _isNull: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _isNull: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "breakpoint_name". All fields are combined with logical 'AND'.
"""
input BreakpointNameComparisonExp {
  _eq: breakpoint_name
  _gt: breakpoint_name
  _gte: breakpoint_name
  _in: [breakpoint_name!]
  _isNull: Boolean
  _lt: breakpoint_name
  _lte: breakpoint_name
  _neq: breakpoint_name
  _nin: [breakpoint_name!]
}

"""ordering argument of a cursor"""
enum CursorOrdering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
Boolean expression to compare columns of type "elevation_plot_range". All fields are combined with logical 'AND'.
"""
input ElevationPlotRangeComparisonExp {
  _eq: elevation_plot_range
  _gt: elevation_plot_range
  _gte: elevation_plot_range
  _in: [elevation_plot_range!]
  _isNull: Boolean
  _lt: elevation_plot_range
  _lte: elevation_plot_range
  _neq: elevation_plot_range
  _nin: [elevation_plot_range!]
}

"""
Boolean expression to compare columns of type "elevation_plot_time". All fields are combined with logical 'AND'.
"""
input ElevationPlotTimeComparisonExp {
  _eq: elevation_plot_time
  _gt: elevation_plot_time
  _gte: elevation_plot_time
  _in: [elevation_plot_time!]
  _isNull: Boolean
  _lt: elevation_plot_time
  _lte: elevation_plot_time
  _neq: elevation_plot_time
  _nin: [elevation_plot_time!]
}

"""
Boolean expression to compare columns of type "grid_layout_area". All fields are combined with logical 'AND'.
"""
input GridLayoutAreaComparisonExp {
  _eq: grid_layout_area
  _gt: grid_layout_area
  _gte: grid_layout_area
  _in: [grid_layout_area!]
  _isNull: Boolean
  _lt: grid_layout_area
  _lte: grid_layout_area
  _neq: grid_layout_area
  _nin: [grid_layout_area!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _isNull: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "itc_chart_type". All fields are combined with logical 'AND'.
"""
input ItcChartTypeComparisonExp {
  _eq: itc_chart_type
  _gt: itc_chart_type
  _gte: itc_chart_type
  _in: [itc_chart_type!]
  _isNull: Boolean
  _lt: itc_chart_type
  _lte: itc_chart_type
  _neq: itc_chart_type
  _nin: [itc_chart_type!]
}

"""
columns and relationships of "lucumaGridLayoutPositions"
"""
type LucumaGridLayoutPositions {
  breakpointName: breakpoint_name!
  height: Int!
  section: grid_layout_area!
  tile: String!
  userId: String!
  width: Int!
  x: Int!
  y: Int!
}

"""
aggregated selection of "lucumaGridLayoutPositions"
"""
type LucumaGridLayoutPositionsAggregate {
  aggregate: LucumaGridLayoutPositionsAggregateFields
  nodes: [LucumaGridLayoutPositions!]!
}

"""
aggregate fields of "lucumaGridLayoutPositions"
"""
type LucumaGridLayoutPositionsAggregateFields {
  avg: LucumaGridLayoutPositionsAvgFields
  count(columns: [LucumaGridLayoutPositionsSelectColumn!], distinct: Boolean): Int!
  max: LucumaGridLayoutPositionsMaxFields
  min: LucumaGridLayoutPositionsMinFields
  stddev: LucumaGridLayoutPositionsStddevFields
  stddevPop: LucumaGridLayoutPositionsStddev_popFields
  stddevSamp: LucumaGridLayoutPositionsStddev_sampFields
  sum: LucumaGridLayoutPositionsSumFields
  varPop: LucumaGridLayoutPositionsVar_popFields
  varSamp: LucumaGridLayoutPositionsVar_sampFields
  variance: LucumaGridLayoutPositionsVarianceFields
}

"""aggregate avg on columns"""
type LucumaGridLayoutPositionsAvgFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
Boolean expression to filter rows from the table "lucumaGridLayoutPositions". All fields are combined with a logical 'AND'.
"""
input LucumaGridLayoutPositionsBoolExp {
  _and: [LucumaGridLayoutPositionsBoolExp!]
  _not: LucumaGridLayoutPositionsBoolExp
  _or: [LucumaGridLayoutPositionsBoolExp!]
  breakpointName: BreakpointNameComparisonExp
  height: IntComparisonExp
  section: GridLayoutAreaComparisonExp
  tile: StringComparisonExp
  userId: StringComparisonExp
  width: IntComparisonExp
  x: IntComparisonExp
  y: IntComparisonExp
}

"""
unique or primary key constraints on table "lucumaGridLayoutPositions"
"""
enum LucumaGridLayoutPositionsConstraint {
  """
  unique or primary key constraint on columns "section", "tile", "userId", "breakpointName"
  """
  grid_layout_positions_pkey
}

"""
input type for incrementing numeric columns in table "lucumaGridLayoutPositions"
"""
input LucumaGridLayoutPositionsIncInput {
  height: Int
  width: Int
  x: Int
  y: Int
}

"""
input type for inserting data into table "lucumaGridLayoutPositions"
"""
input LucumaGridLayoutPositionsInsertInput {
  breakpointName: breakpoint_name
  height: Int
  section: grid_layout_area
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""aggregate max on columns"""
type LucumaGridLayoutPositionsMaxFields {
  breakpointName: breakpoint_name
  height: Int
  section: grid_layout_area
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""aggregate min on columns"""
type LucumaGridLayoutPositionsMinFields {
  breakpointName: breakpoint_name
  height: Int
  section: grid_layout_area
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""
response of any mutation on the table "lucumaGridLayoutPositions"
"""
type LucumaGridLayoutPositionsMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaGridLayoutPositions!]!
}

"""
on_conflict condition type for table "lucumaGridLayoutPositions"
"""
input LucumaGridLayoutPositionsOnConflict {
  constraint: LucumaGridLayoutPositionsConstraint!
  update_columns: [LucumaGridLayoutPositionsUpdateColumn!]! = []
  where: LucumaGridLayoutPositionsBoolExp
}

"""Ordering options when selecting data from "lucumaGridLayoutPositions"."""
input LucumaGridLayoutPositionsOrderBy {
  breakpointName: OrderBy
  height: OrderBy
  section: OrderBy
  tile: OrderBy
  userId: OrderBy
  width: OrderBy
  x: OrderBy
  y: OrderBy
}

"""primary key columns input for table: lucumaGridLayoutPositions"""
input LucumaGridLayoutPositionsPkColumnsInput {
  breakpointName: breakpoint_name!
  section: grid_layout_area!
  tile: String!
  userId: String!
}

"""
select columns of table "lucumaGridLayoutPositions"
"""
enum LucumaGridLayoutPositionsSelectColumn {
  """column name"""
  breakpointName

  """column name"""
  height

  """column name"""
  section

  """column name"""
  tile

  """column name"""
  userId

  """column name"""
  width

  """column name"""
  x

  """column name"""
  y
}

"""
input type for updating data in table "lucumaGridLayoutPositions"
"""
input LucumaGridLayoutPositionsSetInput {
  breakpointName: breakpoint_name
  height: Int
  section: grid_layout_area
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""aggregate stddev on columns"""
type LucumaGridLayoutPositionsStddevFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate stddev_pop on columns"""
type LucumaGridLayoutPositionsStddev_popFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate stddev_samp on columns"""
type LucumaGridLayoutPositionsStddev_sampFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate sum on columns"""
type LucumaGridLayoutPositionsSumFields {
  height: Int
  width: Int
  x: Int
  y: Int
}

"""
update columns of table "lucumaGridLayoutPositions"
"""
enum LucumaGridLayoutPositionsUpdateColumn {
  """column name"""
  breakpointName

  """column name"""
  height

  """column name"""
  section

  """column name"""
  tile

  """column name"""
  userId

  """column name"""
  width

  """column name"""
  x

  """column name"""
  y
}

input LucumaGridLayoutPositionsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: LucumaGridLayoutPositionsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: LucumaGridLayoutPositionsSetInput
  where: LucumaGridLayoutPositionsBoolExp!
}

"""aggregate var_pop on columns"""
type LucumaGridLayoutPositionsVar_popFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate var_samp on columns"""
type LucumaGridLayoutPositionsVar_sampFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate variance on columns"""
type LucumaGridLayoutPositionsVarianceFields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
columns and relationships of "lucumaItcPlotPreferences"
"""
type LucumaItcPlotPreferences {
  chartType: itc_chart_type!
  detailsOpen: Boolean!

  """An object relationship"""
  lucuma_observation: LucumaObservation!
  observationId: String!
  userId: String!
}

"""
aggregated selection of "lucumaItcPlotPreferences"
"""
type LucumaItcPlotPreferencesAggregate {
  aggregate: LucumaItcPlotPreferencesAggregateFields
  nodes: [LucumaItcPlotPreferences!]!
}

"""
aggregate fields of "lucumaItcPlotPreferences"
"""
type LucumaItcPlotPreferencesAggregateFields {
  count(columns: [LucumaItcPlotPreferencesSelectColumn!], distinct: Boolean): Int!
  max: LucumaItcPlotPreferencesMaxFields
  min: LucumaItcPlotPreferencesMinFields
}

"""
order by aggregate values of table "lucumaItcPlotPreferences"
"""
input LucumaItcPlotPreferencesAggregateOrderBy {
  count: OrderBy
  max: lucumaItcPlotPreferences_max_order_by
  min: lucumaItcPlotPreferences_min_order_by
}

"""
input type for inserting array relation for remote table "lucumaItcPlotPreferences"
"""
input LucumaItcPlotPreferencesArrRelInsertInput {
  data: [LucumaItcPlotPreferencesInsertInput!]!

  """upsert condition"""
  onConflict: LucumaItcPlotPreferencesOnConflict
}

"""
Boolean expression to filter rows from the table "lucumaItcPlotPreferences". All fields are combined with a logical 'AND'.
"""
input LucumaItcPlotPreferencesBoolExp {
  _and: [LucumaItcPlotPreferencesBoolExp!]
  _not: LucumaItcPlotPreferencesBoolExp
  _or: [LucumaItcPlotPreferencesBoolExp!]
  chartType: ItcChartTypeComparisonExp
  detailsOpen: BooleanComparisonExp
  lucuma_observation: LucumaObservationBoolExp
  observationId: StringComparisonExp
  userId: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaItcPlotPreferences"
"""
enum LucumaItcPlotPreferencesConstraint {
  """
  unique or primary key constraint on columns "observationId", "userId"
  """
  lucuma_itc_plot_preferences_pkey
}

"""
input type for inserting data into table "lucumaItcPlotPreferences"
"""
input LucumaItcPlotPreferencesInsertInput {
  chartType: itc_chart_type
  detailsOpen: Boolean
  lucuma_observation: LucumaObservationObjRelInsertInput
  observationId: String
  userId: String
}

"""aggregate max on columns"""
type LucumaItcPlotPreferencesMaxFields {
  chartType: itc_chart_type
  observationId: String
  userId: String
}

"""aggregate min on columns"""
type LucumaItcPlotPreferencesMinFields {
  chartType: itc_chart_type
  observationId: String
  userId: String
}

"""
response of any mutation on the table "lucumaItcPlotPreferences"
"""
type LucumaItcPlotPreferencesMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaItcPlotPreferences!]!
}

"""
on_conflict condition type for table "lucumaItcPlotPreferences"
"""
input LucumaItcPlotPreferencesOnConflict {
  constraint: LucumaItcPlotPreferencesConstraint!
  update_columns: [LucumaItcPlotPreferencesUpdateColumn!]! = []
  where: LucumaItcPlotPreferencesBoolExp
}

"""Ordering options when selecting data from "lucumaItcPlotPreferences"."""
input LucumaItcPlotPreferencesOrderBy {
  chartType: OrderBy
  detailsOpen: OrderBy
  lucuma_observation: LucumaObservationOrderBy
  observationId: OrderBy
  userId: OrderBy
}

"""primary key columns input for table: lucumaItcPlotPreferences"""
input LucumaItcPlotPreferencesPkColumnsInput {
  observationId: String!
  userId: String!
}

"""
select columns of table "lucumaItcPlotPreferences"
"""
enum LucumaItcPlotPreferencesSelectColumn {
  """column name"""
  chartType

  """column name"""
  detailsOpen

  """column name"""
  observationId

  """column name"""
  userId
}

"""
input type for updating data in table "lucumaItcPlotPreferences"
"""
input LucumaItcPlotPreferencesSetInput {
  chartType: itc_chart_type
  detailsOpen: Boolean
  observationId: String
  userId: String
}

"""
update columns of table "lucumaItcPlotPreferences"
"""
enum LucumaItcPlotPreferencesUpdateColumn {
  """column name"""
  chartType

  """column name"""
  detailsOpen

  """column name"""
  observationId

  """column name"""
  userId
}

input LucumaItcPlotPreferencesUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaItcPlotPreferencesSetInput
  where: LucumaItcPlotPreferencesBoolExp!
}

"""
columns and relationships of "lucumaObservation"
"""
type LucumaObservation {
  """An aggregate relationship"""
  lucumaItcPlotPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaItcPlotPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaItcPlotPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): LucumaItcPlotPreferencesAggregate!

  """An array relationship"""
  lucuma_itc_plot_preferences(
    """distinct select on columns"""
    distinctOn: [LucumaItcPlotPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaItcPlotPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): [LucumaItcPlotPreferences!]!
  observationId: String!
}

"""
aggregated selection of "lucumaObservation"
"""
type LucumaObservationAggregate {
  aggregate: LucumaObservationAggregateFields
  nodes: [LucumaObservation!]!
}

"""
aggregate fields of "lucumaObservation"
"""
type LucumaObservationAggregateFields {
  count(columns: [LucumaObservationSelectColumn!], distinct: Boolean): Int!
  max: LucumaObservationMaxFields
  min: LucumaObservationMinFields
}

"""
Boolean expression to filter rows from the table "lucumaObservation". All fields are combined with a logical 'AND'.
"""
input LucumaObservationBoolExp {
  _and: [LucumaObservationBoolExp!]
  _not: LucumaObservationBoolExp
  _or: [LucumaObservationBoolExp!]
  lucuma_itc_plot_preferences: LucumaItcPlotPreferencesBoolExp
  observationId: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaObservation"
"""
enum LucumaObservationConstraint {
  """
  unique or primary key constraint on columns "observationId"
  """
  lucuma_observation_pkey
}

"""
input type for inserting data into table "lucumaObservation"
"""
input LucumaObservationInsertInput {
  lucuma_itc_plot_preferences: LucumaItcPlotPreferencesArrRelInsertInput
  observationId: String
}

"""aggregate max on columns"""
type LucumaObservationMaxFields {
  observationId: String
}

"""aggregate min on columns"""
type LucumaObservationMinFields {
  observationId: String
}

"""
response of any mutation on the table "lucumaObservation"
"""
type LucumaObservationMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaObservation!]!
}

"""
input type for inserting object relation for remote table "lucumaObservation"
"""
input LucumaObservationObjRelInsertInput {
  data: LucumaObservationInsertInput!

  """upsert condition"""
  onConflict: LucumaObservationOnConflict
}

"""
on_conflict condition type for table "lucumaObservation"
"""
input LucumaObservationOnConflict {
  constraint: LucumaObservationConstraint!
  update_columns: [LucumaObservationUpdateColumn!]! = []
  where: LucumaObservationBoolExp
}

"""Ordering options when selecting data from "lucumaObservation"."""
input LucumaObservationOrderBy {
  lucuma_itc_plot_preferencesAggregate: LucumaItcPlotPreferencesAggregateOrderBy
  observationId: OrderBy
}

"""primary key columns input for table: lucumaObservation"""
input LucumaObservationPkColumnsInput {
  observationId: String!
}

"""
select columns of table "lucumaObservation"
"""
enum LucumaObservationSelectColumn {
  """column name"""
  observationId
}

"""
input type for updating data in table "lucumaObservation"
"""
input LucumaObservationSetInput {
  observationId: String
}

"""
update columns of table "lucumaObservation"
"""
enum LucumaObservationUpdateColumn {
  """column name"""
  observationId
}

input LucumaObservationUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaObservationSetInput
  where: LucumaObservationBoolExp!
}

"""
columns and relationships of "lucumaResizableWidth"
"""
type LucumaResizableWidth {
  section: resizable_area!
  userId: String!
  width: Int!
}

"""
aggregated selection of "lucumaResizableWidth"
"""
type LucumaResizableWidthAggregate {
  aggregate: LucumaResizableWidthAggregateFields
  nodes: [LucumaResizableWidth!]!
}

"""
aggregate fields of "lucumaResizableWidth"
"""
type LucumaResizableWidthAggregateFields {
  avg: LucumaResizableWidthAvgFields
  count(columns: [LucumaResizableWidthSelectColumn!], distinct: Boolean): Int!
  max: LucumaResizableWidthMaxFields
  min: LucumaResizableWidthMinFields
  stddev: LucumaResizableWidthStddevFields
  stddevPop: LucumaResizableWidthStddev_popFields
  stddevSamp: LucumaResizableWidthStddev_sampFields
  sum: LucumaResizableWidthSumFields
  varPop: LucumaResizableWidthVar_popFields
  varSamp: LucumaResizableWidthVar_sampFields
  variance: LucumaResizableWidthVarianceFields
}

"""aggregate avg on columns"""
type LucumaResizableWidthAvgFields {
  width: Float
}

"""
Boolean expression to filter rows from the table "lucumaResizableWidth". All fields are combined with a logical 'AND'.
"""
input LucumaResizableWidthBoolExp {
  _and: [LucumaResizableWidthBoolExp!]
  _not: LucumaResizableWidthBoolExp
  _or: [LucumaResizableWidthBoolExp!]
  section: ResizableAreaComparisonExp
  userId: StringComparisonExp
  width: IntComparisonExp
}

"""
unique or primary key constraints on table "lucumaResizableWidth"
"""
enum LucumaResizableWidthConstraint {
  """
  unique or primary key constraint on columns "section", "userId"
  """
  explore_resizable_width_pkey
}

"""
input type for incrementing numeric columns in table "lucumaResizableWidth"
"""
input LucumaResizableWidthIncInput {
  width: Int
}

"""
input type for inserting data into table "lucumaResizableWidth"
"""
input LucumaResizableWidthInsertInput {
  section: resizable_area
  userId: String
  width: Int
}

"""aggregate max on columns"""
type LucumaResizableWidthMaxFields {
  section: resizable_area
  userId: String
  width: Int
}

"""aggregate min on columns"""
type LucumaResizableWidthMinFields {
  section: resizable_area
  userId: String
  width: Int
}

"""
response of any mutation on the table "lucumaResizableWidth"
"""
type LucumaResizableWidthMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaResizableWidth!]!
}

"""
on_conflict condition type for table "lucumaResizableWidth"
"""
input LucumaResizableWidthOnConflict {
  constraint: LucumaResizableWidthConstraint!
  update_columns: [LucumaResizableWidthUpdateColumn!]! = []
  where: LucumaResizableWidthBoolExp
}

"""Ordering options when selecting data from "lucumaResizableWidth"."""
input LucumaResizableWidthOrderBy {
  section: OrderBy
  userId: OrderBy
  width: OrderBy
}

"""primary key columns input for table: lucumaResizableWidth"""
input LucumaResizableWidthPkColumnsInput {
  section: resizable_area!
  userId: String!
}

"""
select columns of table "lucumaResizableWidth"
"""
enum LucumaResizableWidthSelectColumn {
  """column name"""
  section

  """column name"""
  userId

  """column name"""
  width
}

"""
input type for updating data in table "lucumaResizableWidth"
"""
input LucumaResizableWidthSetInput {
  section: resizable_area
  userId: String
  width: Int
}

"""aggregate stddev on columns"""
type LucumaResizableWidthStddevFields {
  width: Float
}

"""aggregate stddev_pop on columns"""
type LucumaResizableWidthStddev_popFields {
  width: Float
}

"""aggregate stddev_samp on columns"""
type LucumaResizableWidthStddev_sampFields {
  width: Float
}

"""aggregate sum on columns"""
type LucumaResizableWidthSumFields {
  width: Int
}

"""
update columns of table "lucumaResizableWidth"
"""
enum LucumaResizableWidthUpdateColumn {
  """column name"""
  section

  """column name"""
  userId

  """column name"""
  width
}

input LucumaResizableWidthUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: LucumaResizableWidthIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: LucumaResizableWidthSetInput
  where: LucumaResizableWidthBoolExp!
}

"""aggregate var_pop on columns"""
type LucumaResizableWidthVar_popFields {
  width: Float
}

"""aggregate var_samp on columns"""
type LucumaResizableWidthVar_sampFields {
  width: Float
}

"""aggregate variance on columns"""
type LucumaResizableWidthVarianceFields {
  width: Float
}

"""
columns and relationships of "lucumaTarget"
"""
type LucumaTarget {
  """An aggregate relationship"""
  lucumaTargetPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaTargetPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetPreferencesBoolExp
  ): LucumaTargetPreferencesAggregate!

  """An array relationship"""
  lucuma_target_preferences(
    """distinct select on columns"""
    distinctOn: [LucumaTargetPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetPreferencesBoolExp
  ): [LucumaTargetPreferences!]!
  targetId: String!
}

"""
aggregated selection of "lucumaTarget"
"""
type LucumaTargetAggregate {
  aggregate: LucumaTargetAggregateFields
  nodes: [LucumaTarget!]!
}

"""
aggregate fields of "lucumaTarget"
"""
type LucumaTargetAggregateFields {
  count(columns: [LucumaTargetSelectColumn!], distinct: Boolean): Int!
  max: LucumaTargetMaxFields
  min: LucumaTargetMinFields
}

"""
Boolean expression to filter rows from the table "lucumaTarget". All fields are combined with a logical 'AND'.
"""
input LucumaTargetBoolExp {
  _and: [LucumaTargetBoolExp!]
  _not: LucumaTargetBoolExp
  _or: [LucumaTargetBoolExp!]
  lucuma_target_preferences: LucumaTargetPreferencesBoolExp
  targetId: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaTarget"
"""
enum LucumaTargetConstraint {
  """
  unique or primary key constraint on columns "targetId"
  """
  lucuma_target_pkey
}

"""
input type for inserting data into table "lucumaTarget"
"""
input LucumaTargetInsertInput {
  lucuma_target_preferences: LucumaTargetPreferencesArrRelInsertInput
  targetId: String
}

"""aggregate max on columns"""
type LucumaTargetMaxFields {
  targetId: String
}

"""aggregate min on columns"""
type LucumaTargetMinFields {
  targetId: String
}

"""
response of any mutation on the table "lucumaTarget"
"""
type LucumaTargetMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaTarget!]!
}

"""
input type for inserting object relation for remote table "lucumaTarget"
"""
input LucumaTargetObjRelInsertInput {
  data: LucumaTargetInsertInput!

  """upsert condition"""
  onConflict: LucumaTargetOnConflict
}

"""
on_conflict condition type for table "lucumaTarget"
"""
input LucumaTargetOnConflict {
  constraint: LucumaTargetConstraint!
  update_columns: [LucumaTargetUpdateColumn!]! = []
  where: LucumaTargetBoolExp
}

"""Ordering options when selecting data from "lucumaTarget"."""
input LucumaTargetOrderBy {
  lucuma_target_preferencesAggregate: LucumaTargetPreferencesAggregateOrderBy
  targetId: OrderBy
}

"""primary key columns input for table: lucumaTarget"""
input LucumaTargetPkColumnsInput {
  targetId: String!
}

"""
columns and relationships of "lucumaTargetPreferences"
"""
type LucumaTargetPreferences {
  agsCandidates: Boolean
  agsOverlay: Boolean
  fovDec: bigint
  fovRA: bigint
  fullScreen: Boolean

  """An object relationship"""
  lucuma_target: LucumaTarget!
  targetId: String!
  userId: String!
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
aggregated selection of "lucumaTargetPreferences"
"""
type LucumaTargetPreferencesAggregate {
  aggregate: LucumaTargetPreferencesAggregateFields
  nodes: [LucumaTargetPreferences!]!
}

"""
aggregate fields of "lucumaTargetPreferences"
"""
type LucumaTargetPreferencesAggregateFields {
  avg: LucumaTargetPreferencesAvgFields
  count(columns: [LucumaTargetPreferencesSelectColumn!], distinct: Boolean): Int!
  max: LucumaTargetPreferencesMaxFields
  min: LucumaTargetPreferencesMinFields
  stddev: LucumaTargetPreferencesStddevFields
  stddevPop: LucumaTargetPreferencesStddev_popFields
  stddevSamp: LucumaTargetPreferencesStddev_sampFields
  sum: LucumaTargetPreferencesSumFields
  varPop: LucumaTargetPreferencesVar_popFields
  varSamp: LucumaTargetPreferencesVar_sampFields
  variance: LucumaTargetPreferencesVarianceFields
}

"""
order by aggregate values of table "lucumaTargetPreferences"
"""
input LucumaTargetPreferencesAggregateOrderBy {
  avg: lucumaTargetPreferences_avg_order_by
  count: OrderBy
  max: lucumaTargetPreferences_max_order_by
  min: lucumaTargetPreferences_min_order_by
  stddev: lucumaTargetPreferences_stddev_order_by
  stddev_pop: lucumaTargetPreferences_stddev_pop_order_by
  stddev_samp: lucumaTargetPreferences_stddev_samp_order_by
  sum: lucumaTargetPreferences_sum_order_by
  var_pop: lucumaTargetPreferences_var_pop_order_by
  var_samp: lucumaTargetPreferences_var_samp_order_by
  variance: lucumaTargetPreferences_variance_order_by
}

"""
input type for inserting array relation for remote table "lucumaTargetPreferences"
"""
input LucumaTargetPreferencesArrRelInsertInput {
  data: [LucumaTargetPreferencesInsertInput!]!

  """upsert condition"""
  onConflict: LucumaTargetPreferencesOnConflict
}

"""aggregate avg on columns"""
type LucumaTargetPreferencesAvgFields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
Boolean expression to filter rows from the table "lucumaTargetPreferences". All fields are combined with a logical 'AND'.
"""
input LucumaTargetPreferencesBoolExp {
  _and: [LucumaTargetPreferencesBoolExp!]
  _not: LucumaTargetPreferencesBoolExp
  _or: [LucumaTargetPreferencesBoolExp!]
  agsCandidates: BooleanComparisonExp
  agsOverlay: BooleanComparisonExp
  fovDec: BigintComparisonExp
  fovRA: BigintComparisonExp
  fullScreen: BooleanComparisonExp
  lucuma_target: LucumaTargetBoolExp
  targetId: StringComparisonExp
  userId: StringComparisonExp
  viewOffsetP: BigintComparisonExp
  viewOffsetQ: BigintComparisonExp
}

"""
unique or primary key constraints on table "lucumaTargetPreferences"
"""
enum LucumaTargetPreferencesConstraint {
  """
  unique or primary key constraint on columns "targetId", "userId"
  """
  lucuma_target_preferences_pkey
}

"""
input type for incrementing numeric columns in table "lucumaTargetPreferences"
"""
input LucumaTargetPreferencesIncInput {
  fovDec: bigint
  fovRA: bigint
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
input type for inserting data into table "lucumaTargetPreferences"
"""
input LucumaTargetPreferencesInsertInput {
  agsCandidates: Boolean
  agsOverlay: Boolean
  fovDec: bigint
  fovRA: bigint
  fullScreen: Boolean
  lucuma_target: LucumaTargetObjRelInsertInput
  targetId: String
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""aggregate max on columns"""
type LucumaTargetPreferencesMaxFields {
  fovDec: bigint
  fovRA: bigint
  targetId: String
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""aggregate min on columns"""
type LucumaTargetPreferencesMinFields {
  fovDec: bigint
  fovRA: bigint
  targetId: String
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
response of any mutation on the table "lucumaTargetPreferences"
"""
type LucumaTargetPreferencesMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaTargetPreferences!]!
}

"""
on_conflict condition type for table "lucumaTargetPreferences"
"""
input LucumaTargetPreferencesOnConflict {
  constraint: LucumaTargetPreferencesConstraint!
  update_columns: [LucumaTargetPreferencesUpdateColumn!]! = []
  where: LucumaTargetPreferencesBoolExp
}

"""Ordering options when selecting data from "lucumaTargetPreferences"."""
input LucumaTargetPreferencesOrderBy {
  agsCandidates: OrderBy
  agsOverlay: OrderBy
  fovDec: OrderBy
  fovRA: OrderBy
  fullScreen: OrderBy
  lucuma_target: LucumaTargetOrderBy
  targetId: OrderBy
  userId: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""primary key columns input for table: lucumaTargetPreferences"""
input LucumaTargetPreferencesPkColumnsInput {
  targetId: String!
  userId: String!
}

"""
select columns of table "lucumaTargetPreferences"
"""
enum LucumaTargetPreferencesSelectColumn {
  """column name"""
  agsCandidates

  """column name"""
  agsOverlay

  """column name"""
  fovDec

  """column name"""
  fovRA

  """column name"""
  fullScreen

  """column name"""
  targetId

  """column name"""
  userId

  """column name"""
  viewOffsetP

  """column name"""
  viewOffsetQ
}

"""
input type for updating data in table "lucumaTargetPreferences"
"""
input LucumaTargetPreferencesSetInput {
  agsCandidates: Boolean
  agsOverlay: Boolean
  fovDec: bigint
  fovRA: bigint
  fullScreen: Boolean
  targetId: String
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""aggregate stddev on columns"""
type LucumaTargetPreferencesStddevFields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""aggregate stddev_pop on columns"""
type LucumaTargetPreferencesStddev_popFields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""aggregate stddev_samp on columns"""
type LucumaTargetPreferencesStddev_sampFields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""aggregate sum on columns"""
type LucumaTargetPreferencesSumFields {
  fovDec: bigint
  fovRA: bigint
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
update columns of table "lucumaTargetPreferences"
"""
enum LucumaTargetPreferencesUpdateColumn {
  """column name"""
  agsCandidates

  """column name"""
  agsOverlay

  """column name"""
  fovDec

  """column name"""
  fovRA

  """column name"""
  fullScreen

  """column name"""
  targetId

  """column name"""
  userId

  """column name"""
  viewOffsetP

  """column name"""
  viewOffsetQ
}

input LucumaTargetPreferencesUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: LucumaTargetPreferencesIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: LucumaTargetPreferencesSetInput
  where: LucumaTargetPreferencesBoolExp!
}

"""aggregate var_pop on columns"""
type LucumaTargetPreferencesVar_popFields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""aggregate var_samp on columns"""
type LucumaTargetPreferencesVar_sampFields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""aggregate variance on columns"""
type LucumaTargetPreferencesVarianceFields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
select columns of table "lucumaTarget"
"""
enum LucumaTargetSelectColumn {
  """column name"""
  targetId
}

"""
input type for updating data in table "lucumaTarget"
"""
input LucumaTargetSetInput {
  targetId: String
}

"""
update columns of table "lucumaTarget"
"""
enum LucumaTargetUpdateColumn {
  """column name"""
  targetId
}

input LucumaTargetUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaTargetSetInput
  where: LucumaTargetBoolExp!
}

"""
columns and relationships of "lucumaUser"
"""
type LucumaUser {
  userId: String!
}

"""
aggregated selection of "lucumaUser"
"""
type LucumaUserAggregate {
  aggregate: LucumaUserAggregateFields
  nodes: [LucumaUser!]!
}

"""
aggregate fields of "lucumaUser"
"""
type LucumaUserAggregateFields {
  count(columns: [LucumaUserSelectColumn!], distinct: Boolean): Int!
  max: LucumaUserMaxFields
  min: LucumaUserMinFields
}

"""
Boolean expression to filter rows from the table "lucumaUser". All fields are combined with a logical 'AND'.
"""
input LucumaUserBoolExp {
  _and: [LucumaUserBoolExp!]
  _not: LucumaUserBoolExp
  _or: [LucumaUserBoolExp!]
  userId: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaUser"
"""
enum LucumaUserConstraint {
  """
  unique or primary key constraint on columns "userId"
  """
  lucuma_user_pkey
}

"""
input type for inserting data into table "lucumaUser"
"""
input LucumaUserInsertInput {
  userId: String
}

"""aggregate max on columns"""
type LucumaUserMaxFields {
  userId: String
}

"""aggregate min on columns"""
type LucumaUserMinFields {
  userId: String
}

"""
response of any mutation on the table "lucumaUser"
"""
type LucumaUserMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaUser!]!
}

"""
input type for inserting object relation for remote table "lucumaUser"
"""
input LucumaUserObjRelInsertInput {
  data: LucumaUserInsertInput!

  """upsert condition"""
  onConflict: LucumaUserOnConflict
}

"""
on_conflict condition type for table "lucumaUser"
"""
input LucumaUserOnConflict {
  constraint: LucumaUserConstraint!
  update_columns: [LucumaUserUpdateColumn!]! = []
  where: LucumaUserBoolExp
}

"""Ordering options when selecting data from "lucumaUser"."""
input LucumaUserOrderBy {
  userId: OrderBy
}

"""primary key columns input for table: lucumaUser"""
input LucumaUserPkColumnsInput {
  userId: String!
}

"""
columns and relationships of "lucumaUserPreferences"
"""
type LucumaUserPreferences {
  aladinMouseScroll: Boolean
  elevationPlotRange: elevation_plot_range
  elevationPlotTime: elevation_plot_time

  """An object relationship"""
  lucuma_user: LucumaUser!
  userId: String!
}

"""
aggregated selection of "lucumaUserPreferences"
"""
type LucumaUserPreferencesAggregate {
  aggregate: LucumaUserPreferencesAggregateFields
  nodes: [LucumaUserPreferences!]!
}

"""
aggregate fields of "lucumaUserPreferences"
"""
type LucumaUserPreferencesAggregateFields {
  count(columns: [LucumaUserPreferencesSelectColumn!], distinct: Boolean): Int!
  max: LucumaUserPreferencesMaxFields
  min: LucumaUserPreferencesMinFields
}

"""
Boolean expression to filter rows from the table "lucumaUserPreferences". All fields are combined with a logical 'AND'.
"""
input LucumaUserPreferencesBoolExp {
  _and: [LucumaUserPreferencesBoolExp!]
  _not: LucumaUserPreferencesBoolExp
  _or: [LucumaUserPreferencesBoolExp!]
  aladinMouseScroll: BooleanComparisonExp
  elevationPlotRange: ElevationPlotRangeComparisonExp
  elevationPlotTime: ElevationPlotTimeComparisonExp
  lucuma_user: LucumaUserBoolExp
  userId: StringComparisonExp
}

"""
unique or primary key constraints on table "lucumaUserPreferences"
"""
enum LucumaUserPreferencesConstraint {
  """
  unique or primary key constraint on columns "userId"
  """
  lucuma_user_preferences_pkey
}

"""
input type for inserting data into table "lucumaUserPreferences"
"""
input LucumaUserPreferencesInsertInput {
  aladinMouseScroll: Boolean
  elevationPlotRange: elevation_plot_range
  elevationPlotTime: elevation_plot_time
  lucuma_user: LucumaUserObjRelInsertInput
  userId: String
}

"""aggregate max on columns"""
type LucumaUserPreferencesMaxFields {
  elevationPlotRange: elevation_plot_range
  elevationPlotTime: elevation_plot_time
  userId: String
}

"""aggregate min on columns"""
type LucumaUserPreferencesMinFields {
  elevationPlotRange: elevation_plot_range
  elevationPlotTime: elevation_plot_time
  userId: String
}

"""
response of any mutation on the table "lucumaUserPreferences"
"""
type LucumaUserPreferencesMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [LucumaUserPreferences!]!
}

"""
on_conflict condition type for table "lucumaUserPreferences"
"""
input LucumaUserPreferencesOnConflict {
  constraint: LucumaUserPreferencesConstraint!
  update_columns: [LucumaUserPreferencesUpdateColumn!]! = []
  where: LucumaUserPreferencesBoolExp
}

"""Ordering options when selecting data from "lucumaUserPreferences"."""
input LucumaUserPreferencesOrderBy {
  aladinMouseScroll: OrderBy
  elevationPlotRange: OrderBy
  elevationPlotTime: OrderBy
  lucuma_user: LucumaUserOrderBy
  userId: OrderBy
}

"""primary key columns input for table: lucumaUserPreferences"""
input LucumaUserPreferencesPkColumnsInput {
  userId: String!
}

"""
select columns of table "lucumaUserPreferences"
"""
enum LucumaUserPreferencesSelectColumn {
  """column name"""
  aladinMouseScroll

  """column name"""
  elevationPlotRange

  """column name"""
  elevationPlotTime

  """column name"""
  userId
}

"""
input type for updating data in table "lucumaUserPreferences"
"""
input LucumaUserPreferencesSetInput {
  aladinMouseScroll: Boolean
  elevationPlotRange: elevation_plot_range
  elevationPlotTime: elevation_plot_time
  userId: String
}

"""
update columns of table "lucumaUserPreferences"
"""
enum LucumaUserPreferencesUpdateColumn {
  """column name"""
  aladinMouseScroll

  """column name"""
  elevationPlotRange

  """column name"""
  elevationPlotTime

  """column name"""
  userId
}

input LucumaUserPreferencesUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaUserPreferencesSetInput
  where: LucumaUserPreferencesBoolExp!
}

"""
select columns of table "lucumaUser"
"""
enum LucumaUserSelectColumn {
  """column name"""
  userId
}

"""
input type for updating data in table "lucumaUser"
"""
input LucumaUserSetInput {
  userId: String
}

"""
update columns of table "lucumaUser"
"""
enum LucumaUserUpdateColumn {
  """column name"""
  userId
}

input LucumaUserUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LucumaUserSetInput
  where: LucumaUserBoolExp!
}

"""column ordering options"""
enum OrderBy {
  """in ascending order, nulls last"""
  ASC

  """in ascending order, nulls first"""
  ASC_NULLS_FIRST

  """in ascending order, nulls last"""
  ASC_NULLS_LAST

  """in descending order, nulls first"""
  DESC

  """in descending order, nulls first"""
  DESC_NULLS_FIRST

  """in descending order, nulls last"""
  DESC_NULLS_LAST
}

"""
Boolean expression to compare columns of type "resizable_area". All fields are combined with logical 'AND'.
"""
input ResizableAreaComparisonExp {
  _eq: resizable_area
  _gt: resizable_area
  _gte: resizable_area
  _in: [resizable_area!]
  _isNull: Boolean
  _lt: resizable_area
  _lte: resizable_area
  _neq: resizable_area
  _nin: [resizable_area!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _isNull: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

scalar breakpoint_name

scalar elevation_plot_range

scalar elevation_plot_time

scalar grid_layout_area

scalar itc_chart_type

"""
Streaming cursor of the table "lucumaGridLayoutPositions"
"""
input lucumaGridLayoutPositions_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaGridLayoutPositions_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaGridLayoutPositions_streamCursorValueInput {
  breakpointName: breakpoint_name
  height: Int
  section: grid_layout_area
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""
order by max() on columns of table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_max_order_by {
  chartType: OrderBy
  observationId: OrderBy
  userId: OrderBy
}

"""
order by min() on columns of table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_min_order_by {
  chartType: OrderBy
  observationId: OrderBy
  userId: OrderBy
}

"""
Streaming cursor of the table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaItcPlotPreferences_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaItcPlotPreferences_streamCursorValueInput {
  chartType: itc_chart_type
  detailsOpen: Boolean
  observationId: String
  userId: String
}

"""
Streaming cursor of the table "lucumaObservation"
"""
input lucumaObservation_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaObservation_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaObservation_streamCursorValueInput {
  observationId: String
}

"""
Streaming cursor of the table "lucumaResizableWidth"
"""
input lucumaResizableWidth_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaResizableWidth_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaResizableWidth_streamCursorValueInput {
  section: resizable_area
  userId: String
  width: Int
}

"""
order by avg() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_avg_order_by {
  fovDec: OrderBy
  fovRA: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by max() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_max_order_by {
  fovDec: OrderBy
  fovRA: OrderBy
  targetId: OrderBy
  userId: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by min() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_min_order_by {
  fovDec: OrderBy
  fovRA: OrderBy
  targetId: OrderBy
  userId: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by stddev() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_stddev_order_by {
  fovDec: OrderBy
  fovRA: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by stddev_pop() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_stddev_pop_order_by {
  fovDec: OrderBy
  fovRA: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by stddev_samp() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_stddev_samp_order_by {
  fovDec: OrderBy
  fovRA: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
Streaming cursor of the table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaTargetPreferences_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaTargetPreferences_streamCursorValueInput {
  agsCandidates: Boolean
  agsOverlay: Boolean
  fovDec: bigint
  fovRA: bigint
  fullScreen: Boolean
  targetId: String
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
order by sum() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_sum_order_by {
  fovDec: OrderBy
  fovRA: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by var_pop() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_var_pop_order_by {
  fovDec: OrderBy
  fovRA: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by var_samp() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_var_samp_order_by {
  fovDec: OrderBy
  fovRA: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
order by variance() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_variance_order_by {
  fovDec: OrderBy
  fovRA: OrderBy
  viewOffsetP: OrderBy
  viewOffsetQ: OrderBy
}

"""
Streaming cursor of the table "lucumaTarget"
"""
input lucumaTarget_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaTarget_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaTarget_streamCursorValueInput {
  targetId: String
}

"""
Streaming cursor of the table "lucumaUserPreferences"
"""
input lucumaUserPreferences_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaUserPreferences_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaUserPreferences_streamCursorValueInput {
  aladinMouseScroll: Boolean
  elevationPlotRange: elevation_plot_range
  elevationPlotTime: elevation_plot_time
  userId: String
}

"""
Streaming cursor of the table "lucumaUser"
"""
input lucumaUser_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: lucumaUser_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input lucumaUser_streamCursorValueInput {
  userId: String
}

"""mutation root"""
type Mutation {
  """
  delete data from the table: "lucumaGridLayoutPositions"
  """
  deleteLucumaGridLayoutPositions(
    """filter the rows which have to be deleted"""
    where: LucumaGridLayoutPositionsBoolExp!
  ): LucumaGridLayoutPositionsMutationResponse

  """
  delete single row from the table: "lucumaGridLayoutPositions"
  """
  deleteLucumaGridLayoutPositionsByPk(breakpointName: breakpoint_name!, section: grid_layout_area!, tile: String!, userId: String!): LucumaGridLayoutPositions

  """
  delete data from the table: "lucumaItcPlotPreferences"
  """
  deleteLucumaItcPlotPreferences(
    """filter the rows which have to be deleted"""
    where: LucumaItcPlotPreferencesBoolExp!
  ): LucumaItcPlotPreferencesMutationResponse

  """
  delete single row from the table: "lucumaItcPlotPreferences"
  """
  deleteLucumaItcPlotPreferencesByPk(observationId: String!, userId: String!): LucumaItcPlotPreferences

  """
  delete data from the table: "lucumaObservation"
  """
  deleteLucumaObservation(
    """filter the rows which have to be deleted"""
    where: LucumaObservationBoolExp!
  ): LucumaObservationMutationResponse

  """
  delete single row from the table: "lucumaObservation"
  """
  deleteLucumaObservationByPk(observationId: String!): LucumaObservation

  """
  delete data from the table: "lucumaResizableWidth"
  """
  deleteLucumaResizableWidth(
    """filter the rows which have to be deleted"""
    where: LucumaResizableWidthBoolExp!
  ): LucumaResizableWidthMutationResponse

  """
  delete single row from the table: "lucumaResizableWidth"
  """
  deleteLucumaResizableWidthByPk(section: resizable_area!, userId: String!): LucumaResizableWidth

  """
  delete data from the table: "lucumaTarget"
  """
  deleteLucumaTarget(
    """filter the rows which have to be deleted"""
    where: LucumaTargetBoolExp!
  ): LucumaTargetMutationResponse

  """
  delete single row from the table: "lucumaTarget"
  """
  deleteLucumaTargetByPk(targetId: String!): LucumaTarget

  """
  delete data from the table: "lucumaTargetPreferences"
  """
  deleteLucumaTargetPreferences(
    """filter the rows which have to be deleted"""
    where: LucumaTargetPreferencesBoolExp!
  ): LucumaTargetPreferencesMutationResponse

  """
  delete single row from the table: "lucumaTargetPreferences"
  """
  deleteLucumaTargetPreferencesByPk(targetId: String!, userId: String!): LucumaTargetPreferences

  """
  delete data from the table: "lucumaUser"
  """
  deleteLucumaUser(
    """filter the rows which have to be deleted"""
    where: LucumaUserBoolExp!
  ): LucumaUserMutationResponse

  """
  delete single row from the table: "lucumaUser"
  """
  deleteLucumaUserByPk(userId: String!): LucumaUser

  """
  delete data from the table: "lucumaUserPreferences"
  """
  deleteLucumaUserPreferences(
    """filter the rows which have to be deleted"""
    where: LucumaUserPreferencesBoolExp!
  ): LucumaUserPreferencesMutationResponse

  """
  delete single row from the table: "lucumaUserPreferences"
  """
  deleteLucumaUserPreferencesByPk(userId: String!): LucumaUserPreferences

  """
  insert data into the table: "lucumaGridLayoutPositions"
  """
  insertLucumaGridLayoutPositions(
    """the rows to be inserted"""
    objects: [LucumaGridLayoutPositionsInsertInput!]!

    """upsert condition"""
    onConflict: LucumaGridLayoutPositionsOnConflict
  ): LucumaGridLayoutPositionsMutationResponse

  """
  insert a single row into the table: "lucumaGridLayoutPositions"
  """
  insertLucumaGridLayoutPositionsOne(
    """the row to be inserted"""
    object: LucumaGridLayoutPositionsInsertInput!

    """upsert condition"""
    onConflict: LucumaGridLayoutPositionsOnConflict
  ): LucumaGridLayoutPositions

  """
  insert data into the table: "lucumaItcPlotPreferences"
  """
  insertLucumaItcPlotPreferences(
    """the rows to be inserted"""
    objects: [LucumaItcPlotPreferencesInsertInput!]!

    """upsert condition"""
    onConflict: LucumaItcPlotPreferencesOnConflict
  ): LucumaItcPlotPreferencesMutationResponse

  """
  insert a single row into the table: "lucumaItcPlotPreferences"
  """
  insertLucumaItcPlotPreferencesOne(
    """the row to be inserted"""
    object: LucumaItcPlotPreferencesInsertInput!

    """upsert condition"""
    onConflict: LucumaItcPlotPreferencesOnConflict
  ): LucumaItcPlotPreferences

  """
  insert data into the table: "lucumaObservation"
  """
  insertLucumaObservation(
    """the rows to be inserted"""
    objects: [LucumaObservationInsertInput!]!

    """upsert condition"""
    onConflict: LucumaObservationOnConflict
  ): LucumaObservationMutationResponse

  """
  insert a single row into the table: "lucumaObservation"
  """
  insertLucumaObservationOne(
    """the row to be inserted"""
    object: LucumaObservationInsertInput!

    """upsert condition"""
    onConflict: LucumaObservationOnConflict
  ): LucumaObservation

  """
  insert data into the table: "lucumaResizableWidth"
  """
  insertLucumaResizableWidth(
    """the rows to be inserted"""
    objects: [LucumaResizableWidthInsertInput!]!

    """upsert condition"""
    onConflict: LucumaResizableWidthOnConflict
  ): LucumaResizableWidthMutationResponse

  """
  insert a single row into the table: "lucumaResizableWidth"
  """
  insertLucumaResizableWidthOne(
    """the row to be inserted"""
    object: LucumaResizableWidthInsertInput!

    """upsert condition"""
    onConflict: LucumaResizableWidthOnConflict
  ): LucumaResizableWidth

  """
  insert data into the table: "lucumaTarget"
  """
  insertLucumaTarget(
    """the rows to be inserted"""
    objects: [LucumaTargetInsertInput!]!

    """upsert condition"""
    onConflict: LucumaTargetOnConflict
  ): LucumaTargetMutationResponse

  """
  insert a single row into the table: "lucumaTarget"
  """
  insertLucumaTargetOne(
    """the row to be inserted"""
    object: LucumaTargetInsertInput!

    """upsert condition"""
    onConflict: LucumaTargetOnConflict
  ): LucumaTarget

  """
  insert data into the table: "lucumaTargetPreferences"
  """
  insertLucumaTargetPreferences(
    """the rows to be inserted"""
    objects: [LucumaTargetPreferencesInsertInput!]!

    """upsert condition"""
    onConflict: LucumaTargetPreferencesOnConflict
  ): LucumaTargetPreferencesMutationResponse

  """
  insert a single row into the table: "lucumaTargetPreferences"
  """
  insertLucumaTargetPreferencesOne(
    """the row to be inserted"""
    object: LucumaTargetPreferencesInsertInput!

    """upsert condition"""
    onConflict: LucumaTargetPreferencesOnConflict
  ): LucumaTargetPreferences

  """
  insert data into the table: "lucumaUser"
  """
  insertLucumaUser(
    """the rows to be inserted"""
    objects: [LucumaUserInsertInput!]!

    """upsert condition"""
    onConflict: LucumaUserOnConflict
  ): LucumaUserMutationResponse

  """
  insert a single row into the table: "lucumaUser"
  """
  insertLucumaUserOne(
    """the row to be inserted"""
    object: LucumaUserInsertInput!

    """upsert condition"""
    onConflict: LucumaUserOnConflict
  ): LucumaUser

  """
  insert data into the table: "lucumaUserPreferences"
  """
  insertLucumaUserPreferences(
    """the rows to be inserted"""
    objects: [LucumaUserPreferencesInsertInput!]!

    """upsert condition"""
    onConflict: LucumaUserPreferencesOnConflict
  ): LucumaUserPreferencesMutationResponse

  """
  insert a single row into the table: "lucumaUserPreferences"
  """
  insertLucumaUserPreferencesOne(
    """the row to be inserted"""
    object: LucumaUserPreferencesInsertInput!

    """upsert condition"""
    onConflict: LucumaUserPreferencesOnConflict
  ): LucumaUserPreferences

  """
  update data of the table: "lucumaGridLayoutPositions"
  """
  updateLucumaGridLayoutPositions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: LucumaGridLayoutPositionsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: LucumaGridLayoutPositionsSetInput

    """filter the rows which have to be updated"""
    where: LucumaGridLayoutPositionsBoolExp!
  ): LucumaGridLayoutPositionsMutationResponse

  """
  update single row of the table: "lucumaGridLayoutPositions"
  """
  updateLucumaGridLayoutPositionsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: LucumaGridLayoutPositionsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: LucumaGridLayoutPositionsSetInput
    pk_columns: LucumaGridLayoutPositionsPkColumnsInput!
  ): LucumaGridLayoutPositions

  """
  update multiples rows of table: "lucumaGridLayoutPositions"
  """
  updateLucumaGridLayoutPositionsMany(
    """updates to execute, in order"""
    updates: [LucumaGridLayoutPositionsUpdates!]!
  ): [LucumaGridLayoutPositionsMutationResponse]

  """
  update data of the table: "lucumaItcPlotPreferences"
  """
  updateLucumaItcPlotPreferences(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaItcPlotPreferencesSetInput

    """filter the rows which have to be updated"""
    where: LucumaItcPlotPreferencesBoolExp!
  ): LucumaItcPlotPreferencesMutationResponse

  """
  update single row of the table: "lucumaItcPlotPreferences"
  """
  updateLucumaItcPlotPreferencesByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaItcPlotPreferencesSetInput
    pk_columns: LucumaItcPlotPreferencesPkColumnsInput!
  ): LucumaItcPlotPreferences

  """
  update multiples rows of table: "lucumaItcPlotPreferences"
  """
  updateLucumaItcPlotPreferencesMany(
    """updates to execute, in order"""
    updates: [LucumaItcPlotPreferencesUpdates!]!
  ): [LucumaItcPlotPreferencesMutationResponse]

  """
  update data of the table: "lucumaObservation"
  """
  updateLucumaObservation(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaObservationSetInput

    """filter the rows which have to be updated"""
    where: LucumaObservationBoolExp!
  ): LucumaObservationMutationResponse

  """
  update single row of the table: "lucumaObservation"
  """
  updateLucumaObservationByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaObservationSetInput
    pk_columns: LucumaObservationPkColumnsInput!
  ): LucumaObservation

  """
  update multiples rows of table: "lucumaObservation"
  """
  updateLucumaObservationMany(
    """updates to execute, in order"""
    updates: [LucumaObservationUpdates!]!
  ): [LucumaObservationMutationResponse]

  """
  update data of the table: "lucumaResizableWidth"
  """
  updateLucumaResizableWidth(
    """increments the numeric columns with given value of the filtered values"""
    _inc: LucumaResizableWidthIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: LucumaResizableWidthSetInput

    """filter the rows which have to be updated"""
    where: LucumaResizableWidthBoolExp!
  ): LucumaResizableWidthMutationResponse

  """
  update single row of the table: "lucumaResizableWidth"
  """
  updateLucumaResizableWidthByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: LucumaResizableWidthIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: LucumaResizableWidthSetInput
    pk_columns: LucumaResizableWidthPkColumnsInput!
  ): LucumaResizableWidth

  """
  update multiples rows of table: "lucumaResizableWidth"
  """
  updateLucumaResizableWidthMany(
    """updates to execute, in order"""
    updates: [LucumaResizableWidthUpdates!]!
  ): [LucumaResizableWidthMutationResponse]

  """
  update data of the table: "lucumaTarget"
  """
  updateLucumaTarget(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaTargetSetInput

    """filter the rows which have to be updated"""
    where: LucumaTargetBoolExp!
  ): LucumaTargetMutationResponse

  """
  update single row of the table: "lucumaTarget"
  """
  updateLucumaTargetByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaTargetSetInput
    pk_columns: LucumaTargetPkColumnsInput!
  ): LucumaTarget

  """
  update multiples rows of table: "lucumaTarget"
  """
  updateLucumaTargetMany(
    """updates to execute, in order"""
    updates: [LucumaTargetUpdates!]!
  ): [LucumaTargetMutationResponse]

  """
  update data of the table: "lucumaTargetPreferences"
  """
  updateLucumaTargetPreferences(
    """increments the numeric columns with given value of the filtered values"""
    _inc: LucumaTargetPreferencesIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: LucumaTargetPreferencesSetInput

    """filter the rows which have to be updated"""
    where: LucumaTargetPreferencesBoolExp!
  ): LucumaTargetPreferencesMutationResponse

  """
  update single row of the table: "lucumaTargetPreferences"
  """
  updateLucumaTargetPreferencesByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: LucumaTargetPreferencesIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: LucumaTargetPreferencesSetInput
    pk_columns: LucumaTargetPreferencesPkColumnsInput!
  ): LucumaTargetPreferences

  """
  update multiples rows of table: "lucumaTargetPreferences"
  """
  updateLucumaTargetPreferencesMany(
    """updates to execute, in order"""
    updates: [LucumaTargetPreferencesUpdates!]!
  ): [LucumaTargetPreferencesMutationResponse]

  """
  update data of the table: "lucumaUser"
  """
  updateLucumaUser(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaUserSetInput

    """filter the rows which have to be updated"""
    where: LucumaUserBoolExp!
  ): LucumaUserMutationResponse

  """
  update single row of the table: "lucumaUser"
  """
  updateLucumaUserByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaUserSetInput
    pk_columns: LucumaUserPkColumnsInput!
  ): LucumaUser

  """
  update multiples rows of table: "lucumaUser"
  """
  updateLucumaUserMany(
    """updates to execute, in order"""
    updates: [LucumaUserUpdates!]!
  ): [LucumaUserMutationResponse]

  """
  update data of the table: "lucumaUserPreferences"
  """
  updateLucumaUserPreferences(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaUserPreferencesSetInput

    """filter the rows which have to be updated"""
    where: LucumaUserPreferencesBoolExp!
  ): LucumaUserPreferencesMutationResponse

  """
  update single row of the table: "lucumaUserPreferences"
  """
  updateLucumaUserPreferencesByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LucumaUserPreferencesSetInput
    pk_columns: LucumaUserPreferencesPkColumnsInput!
  ): LucumaUserPreferences

  """
  update multiples rows of table: "lucumaUserPreferences"
  """
  updateLucumaUserPreferencesMany(
    """updates to execute, in order"""
    updates: [LucumaUserPreferencesUpdates!]!
  ): [LucumaUserPreferencesMutationResponse]
}

type Query {
  """
  fetch data from the table: "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositions(
    """distinct select on columns"""
    distinctOn: [LucumaGridLayoutPositionsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridLayoutPositionsOrderBy!]

    """filter the rows returned"""
    where: LucumaGridLayoutPositionsBoolExp
  ): [LucumaGridLayoutPositions!]!

  """
  fetch aggregated fields from the table: "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositionsAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaGridLayoutPositionsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridLayoutPositionsOrderBy!]

    """filter the rows returned"""
    where: LucumaGridLayoutPositionsBoolExp
  ): LucumaGridLayoutPositionsAggregate!

  """
  fetch data from the table: "lucumaGridLayoutPositions" using primary key columns
  """
  lucumaGridLayoutPositionsByPk(breakpointName: breakpoint_name!, section: grid_layout_area!, tile: String!, userId: String!): LucumaGridLayoutPositions

  """
  fetch data from the table: "lucumaItcPlotPreferences"
  """
  lucumaItcPlotPreferences(
    """distinct select on columns"""
    distinctOn: [LucumaItcPlotPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaItcPlotPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): [LucumaItcPlotPreferences!]!

  """An aggregate relationship"""
  lucumaItcPlotPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaItcPlotPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaItcPlotPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): LucumaItcPlotPreferencesAggregate!

  """
  fetch data from the table: "lucumaItcPlotPreferences" using primary key columns
  """
  lucumaItcPlotPreferencesByPk(observationId: String!, userId: String!): LucumaItcPlotPreferences

  """
  fetch data from the table: "lucumaObservation"
  """
  lucumaObservation(
    """distinct select on columns"""
    distinctOn: [LucumaObservationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaObservationOrderBy!]

    """filter the rows returned"""
    where: LucumaObservationBoolExp
  ): [LucumaObservation!]!

  """
  fetch aggregated fields from the table: "lucumaObservation"
  """
  lucumaObservationAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaObservationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaObservationOrderBy!]

    """filter the rows returned"""
    where: LucumaObservationBoolExp
  ): LucumaObservationAggregate!

  """
  fetch data from the table: "lucumaObservation" using primary key columns
  """
  lucumaObservationByPk(observationId: String!): LucumaObservation

  """
  fetch data from the table: "lucumaResizableWidth"
  """
  lucumaResizableWidth(
    """distinct select on columns"""
    distinctOn: [LucumaResizableWidthSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaResizableWidthOrderBy!]

    """filter the rows returned"""
    where: LucumaResizableWidthBoolExp
  ): [LucumaResizableWidth!]!

  """
  fetch aggregated fields from the table: "lucumaResizableWidth"
  """
  lucumaResizableWidthAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaResizableWidthSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaResizableWidthOrderBy!]

    """filter the rows returned"""
    where: LucumaResizableWidthBoolExp
  ): LucumaResizableWidthAggregate!

  """
  fetch data from the table: "lucumaResizableWidth" using primary key columns
  """
  lucumaResizableWidthByPk(section: resizable_area!, userId: String!): LucumaResizableWidth

  """
  fetch data from the table: "lucumaTarget"
  """
  lucumaTarget(
    """distinct select on columns"""
    distinctOn: [LucumaTargetSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetBoolExp
  ): [LucumaTarget!]!

  """
  fetch aggregated fields from the table: "lucumaTarget"
  """
  lucumaTargetAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaTargetSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetBoolExp
  ): LucumaTargetAggregate!

  """fetch data from the table: "lucumaTarget" using primary key columns"""
  lucumaTargetByPk(targetId: String!): LucumaTarget

  """
  fetch data from the table: "lucumaTargetPreferences"
  """
  lucumaTargetPreferences(
    """distinct select on columns"""
    distinctOn: [LucumaTargetPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetPreferencesBoolExp
  ): [LucumaTargetPreferences!]!

  """An aggregate relationship"""
  lucumaTargetPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaTargetPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetPreferencesBoolExp
  ): LucumaTargetPreferencesAggregate!

  """
  fetch data from the table: "lucumaTargetPreferences" using primary key columns
  """
  lucumaTargetPreferencesByPk(targetId: String!, userId: String!): LucumaTargetPreferences

  """
  fetch data from the table: "lucumaUser"
  """
  lucumaUser(
    """distinct select on columns"""
    distinctOn: [LucumaUserSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserOrderBy!]

    """filter the rows returned"""
    where: LucumaUserBoolExp
  ): [LucumaUser!]!

  """
  fetch aggregated fields from the table: "lucumaUser"
  """
  lucumaUserAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaUserSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserOrderBy!]

    """filter the rows returned"""
    where: LucumaUserBoolExp
  ): LucumaUserAggregate!

  """fetch data from the table: "lucumaUser" using primary key columns"""
  lucumaUserByPk(userId: String!): LucumaUser

  """
  fetch data from the table: "lucumaUserPreferences"
  """
  lucumaUserPreferences(
    """distinct select on columns"""
    distinctOn: [LucumaUserPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaUserPreferencesBoolExp
  ): [LucumaUserPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaUserPreferences"
  """
  lucumaUserPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaUserPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaUserPreferencesBoolExp
  ): LucumaUserPreferencesAggregate!

  """
  fetch data from the table: "lucumaUserPreferences" using primary key columns
  """
  lucumaUserPreferencesByPk(userId: String!): LucumaUserPreferences
}

scalar resizable_area

type Subscription {
  """
  fetch data from the table: "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositions(
    """distinct select on columns"""
    distinctOn: [LucumaGridLayoutPositionsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridLayoutPositionsOrderBy!]

    """filter the rows returned"""
    where: LucumaGridLayoutPositionsBoolExp
  ): [LucumaGridLayoutPositions!]!

  """
  fetch aggregated fields from the table: "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositionsAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaGridLayoutPositionsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaGridLayoutPositionsOrderBy!]

    """filter the rows returned"""
    where: LucumaGridLayoutPositionsBoolExp
  ): LucumaGridLayoutPositionsAggregate!

  """
  fetch data from the table: "lucumaGridLayoutPositions" using primary key columns
  """
  lucumaGridLayoutPositionsByPk(breakpointName: breakpoint_name!, section: grid_layout_area!, tile: String!, userId: String!): LucumaGridLayoutPositions

  """
  fetch data from the table in a streaming manner : "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositionsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaGridLayoutPositions_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaGridLayoutPositionsBoolExp
  ): [LucumaGridLayoutPositions!]!

  """
  fetch data from the table: "lucumaItcPlotPreferences"
  """
  lucumaItcPlotPreferences(
    """distinct select on columns"""
    distinctOn: [LucumaItcPlotPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaItcPlotPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): [LucumaItcPlotPreferences!]!

  """An aggregate relationship"""
  lucumaItcPlotPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaItcPlotPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaItcPlotPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): LucumaItcPlotPreferencesAggregate!

  """
  fetch data from the table: "lucumaItcPlotPreferences" using primary key columns
  """
  lucumaItcPlotPreferencesByPk(observationId: String!, userId: String!): LucumaItcPlotPreferences

  """
  fetch data from the table in a streaming manner : "lucumaItcPlotPreferences"
  """
  lucumaItcPlotPreferencesStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaItcPlotPreferences_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaItcPlotPreferencesBoolExp
  ): [LucumaItcPlotPreferences!]!

  """
  fetch data from the table: "lucumaObservation"
  """
  lucumaObservation(
    """distinct select on columns"""
    distinctOn: [LucumaObservationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaObservationOrderBy!]

    """filter the rows returned"""
    where: LucumaObservationBoolExp
  ): [LucumaObservation!]!

  """
  fetch aggregated fields from the table: "lucumaObservation"
  """
  lucumaObservationAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaObservationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaObservationOrderBy!]

    """filter the rows returned"""
    where: LucumaObservationBoolExp
  ): LucumaObservationAggregate!

  """
  fetch data from the table: "lucumaObservation" using primary key columns
  """
  lucumaObservationByPk(observationId: String!): LucumaObservation

  """
  fetch data from the table in a streaming manner : "lucumaObservation"
  """
  lucumaObservationStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaObservation_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaObservationBoolExp
  ): [LucumaObservation!]!

  """
  fetch data from the table: "lucumaResizableWidth"
  """
  lucumaResizableWidth(
    """distinct select on columns"""
    distinctOn: [LucumaResizableWidthSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaResizableWidthOrderBy!]

    """filter the rows returned"""
    where: LucumaResizableWidthBoolExp
  ): [LucumaResizableWidth!]!

  """
  fetch aggregated fields from the table: "lucumaResizableWidth"
  """
  lucumaResizableWidthAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaResizableWidthSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaResizableWidthOrderBy!]

    """filter the rows returned"""
    where: LucumaResizableWidthBoolExp
  ): LucumaResizableWidthAggregate!

  """
  fetch data from the table: "lucumaResizableWidth" using primary key columns
  """
  lucumaResizableWidthByPk(section: resizable_area!, userId: String!): LucumaResizableWidth

  """
  fetch data from the table in a streaming manner : "lucumaResizableWidth"
  """
  lucumaResizableWidthStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaResizableWidth_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaResizableWidthBoolExp
  ): [LucumaResizableWidth!]!

  """
  fetch data from the table: "lucumaTarget"
  """
  lucumaTarget(
    """distinct select on columns"""
    distinctOn: [LucumaTargetSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetBoolExp
  ): [LucumaTarget!]!

  """
  fetch aggregated fields from the table: "lucumaTarget"
  """
  lucumaTargetAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaTargetSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetBoolExp
  ): LucumaTargetAggregate!

  """fetch data from the table: "lucumaTarget" using primary key columns"""
  lucumaTargetByPk(targetId: String!): LucumaTarget

  """
  fetch data from the table: "lucumaTargetPreferences"
  """
  lucumaTargetPreferences(
    """distinct select on columns"""
    distinctOn: [LucumaTargetPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetPreferencesBoolExp
  ): [LucumaTargetPreferences!]!

  """An aggregate relationship"""
  lucumaTargetPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaTargetPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaTargetPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaTargetPreferencesBoolExp
  ): LucumaTargetPreferencesAggregate!

  """
  fetch data from the table: "lucumaTargetPreferences" using primary key columns
  """
  lucumaTargetPreferencesByPk(targetId: String!, userId: String!): LucumaTargetPreferences

  """
  fetch data from the table in a streaming manner : "lucumaTargetPreferences"
  """
  lucumaTargetPreferencesStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaTargetPreferences_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaTargetPreferencesBoolExp
  ): [LucumaTargetPreferences!]!

  """
  fetch data from the table in a streaming manner : "lucumaTarget"
  """
  lucumaTargetStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaTarget_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaTargetBoolExp
  ): [LucumaTarget!]!

  """
  fetch data from the table: "lucumaUser"
  """
  lucumaUser(
    """distinct select on columns"""
    distinctOn: [LucumaUserSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserOrderBy!]

    """filter the rows returned"""
    where: LucumaUserBoolExp
  ): [LucumaUser!]!

  """
  fetch aggregated fields from the table: "lucumaUser"
  """
  lucumaUserAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaUserSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserOrderBy!]

    """filter the rows returned"""
    where: LucumaUserBoolExp
  ): LucumaUserAggregate!

  """fetch data from the table: "lucumaUser" using primary key columns"""
  lucumaUserByPk(userId: String!): LucumaUser

  """
  fetch data from the table: "lucumaUserPreferences"
  """
  lucumaUserPreferences(
    """distinct select on columns"""
    distinctOn: [LucumaUserPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaUserPreferencesBoolExp
  ): [LucumaUserPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaUserPreferences"
  """
  lucumaUserPreferencesAggregate(
    """distinct select on columns"""
    distinctOn: [LucumaUserPreferencesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LucumaUserPreferencesOrderBy!]

    """filter the rows returned"""
    where: LucumaUserPreferencesBoolExp
  ): LucumaUserPreferencesAggregate!

  """
  fetch data from the table: "lucumaUserPreferences" using primary key columns
  """
  lucumaUserPreferencesByPk(userId: String!): LucumaUserPreferences

  """
  fetch data from the table in a streaming manner : "lucumaUserPreferences"
  """
  lucumaUserPreferencesStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaUserPreferences_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaUserPreferencesBoolExp
  ): [LucumaUserPreferences!]!

  """
  fetch data from the table in a streaming manner : "lucumaUser"
  """
  lucumaUserStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaUser_streamCursorInput]!

    """filter the rows returned"""
    where: LucumaUserBoolExp
  ): [LucumaUser!]!
}

