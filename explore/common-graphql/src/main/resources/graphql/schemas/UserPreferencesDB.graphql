schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar breakpoint_name

"""
Boolean expression to compare columns of type "breakpoint_name". All fields are combined with logical 'AND'.
"""
input breakpoint_name_comparison_exp {
  _eq: breakpoint_name
  _gt: breakpoint_name
  _gte: breakpoint_name
  _in: [breakpoint_name!]
  _is_null: Boolean
  _lt: breakpoint_name
  _lte: breakpoint_name
  _neq: breakpoint_name
  _nin: [breakpoint_name!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar elevation_plot_range

"""
Boolean expression to compare columns of type "elevation_plot_range". All fields are combined with logical 'AND'.
"""
input elevation_plot_range_comparison_exp {
  _eq: elevation_plot_range
  _gt: elevation_plot_range
  _gte: elevation_plot_range
  _in: [elevation_plot_range!]
  _is_null: Boolean
  _lt: elevation_plot_range
  _lte: elevation_plot_range
  _neq: elevation_plot_range
  _nin: [elevation_plot_range!]
}

scalar elevation_plot_time

"""
Boolean expression to compare columns of type "elevation_plot_time". All fields are combined with logical 'AND'.
"""
input elevation_plot_time_comparison_exp {
  _eq: elevation_plot_time
  _gt: elevation_plot_time
  _gte: elevation_plot_time
  _in: [elevation_plot_time!]
  _is_null: Boolean
  _lt: elevation_plot_time
  _lte: elevation_plot_time
  _neq: elevation_plot_time
  _nin: [elevation_plot_time!]
}

scalar grid_layout_area

"""
Boolean expression to compare columns of type "grid_layout_area". All fields are combined with logical 'AND'.
"""
input grid_layout_area_comparison_exp {
  _eq: grid_layout_area
  _gt: grid_layout_area
  _gte: grid_layout_area
  _in: [grid_layout_area!]
  _is_null: Boolean
  _lt: grid_layout_area
  _lte: grid_layout_area
  _neq: grid_layout_area
  _nin: [grid_layout_area!]
}

scalar itc_chart_type

"""
Boolean expression to compare columns of type "itc_chart_type". All fields are combined with logical 'AND'.
"""
input itc_chart_type_comparison_exp {
  _eq: itc_chart_type
  _gt: itc_chart_type
  _gte: itc_chart_type
  _in: [itc_chart_type!]
  _is_null: Boolean
  _lt: itc_chart_type
  _lte: itc_chart_type
  _neq: itc_chart_type
  _nin: [itc_chart_type!]
}

"""
columns and relationships of "lucumaGridLayoutPositions"
"""
type lucumaGridLayoutPositions {
  breakpointName: breakpoint_name!
  height: Int!
  section: grid_layout_area!
  tile: String!
  userId: String!
  width: Int!
  x: Int!
  y: Int!
}

"""
aggregated selection of "lucumaGridLayoutPositions"
"""
type lucumaGridLayoutPositions_aggregate {
  aggregate: lucumaGridLayoutPositions_aggregate_fields
  nodes: [lucumaGridLayoutPositions!]!
}

"""
aggregate fields of "lucumaGridLayoutPositions"
"""
type lucumaGridLayoutPositions_aggregate_fields {
  avg: lucumaGridLayoutPositions_avg_fields
  count(columns: [lucumaGridLayoutPositions_select_column!], distinct: Boolean): Int!
  max: lucumaGridLayoutPositions_max_fields
  min: lucumaGridLayoutPositions_min_fields
  stddev: lucumaGridLayoutPositions_stddev_fields
  stddev_pop: lucumaGridLayoutPositions_stddev_pop_fields
  stddev_samp: lucumaGridLayoutPositions_stddev_samp_fields
  sum: lucumaGridLayoutPositions_sum_fields
  var_pop: lucumaGridLayoutPositions_var_pop_fields
  var_samp: lucumaGridLayoutPositions_var_samp_fields
  variance: lucumaGridLayoutPositions_variance_fields
}

"""aggregate avg on columns"""
type lucumaGridLayoutPositions_avg_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
Boolean expression to filter rows from the table "lucumaGridLayoutPositions". All fields are combined with a logical 'AND'.
"""
input lucumaGridLayoutPositions_bool_exp {
  _and: [lucumaGridLayoutPositions_bool_exp!]
  _not: lucumaGridLayoutPositions_bool_exp
  _or: [lucumaGridLayoutPositions_bool_exp!]
  breakpointName: breakpoint_name_comparison_exp
  height: Int_comparison_exp
  section: grid_layout_area_comparison_exp
  tile: String_comparison_exp
  userId: String_comparison_exp
  width: Int_comparison_exp
  x: Int_comparison_exp
  y: Int_comparison_exp
}

"""
unique or primary key constraints on table "lucumaGridLayoutPositions"
"""
enum lucumaGridLayoutPositions_constraint {
  """
  unique or primary key constraint on columns "section", "tile", "userId", "breakpointName"
  """
  grid_layout_positions_pkey
}

"""
input type for incrementing numeric columns in table "lucumaGridLayoutPositions"
"""
input lucumaGridLayoutPositions_inc_input {
  height: Int
  width: Int
  x: Int
  y: Int
}

"""
input type for inserting data into table "lucumaGridLayoutPositions"
"""
input lucumaGridLayoutPositions_insert_input {
  breakpointName: breakpoint_name
  height: Int
  section: grid_layout_area
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""aggregate max on columns"""
type lucumaGridLayoutPositions_max_fields {
  breakpointName: breakpoint_name
  height: Int
  section: grid_layout_area
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""aggregate min on columns"""
type lucumaGridLayoutPositions_min_fields {
  breakpointName: breakpoint_name
  height: Int
  section: grid_layout_area
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""
response of any mutation on the table "lucumaGridLayoutPositions"
"""
type lucumaGridLayoutPositions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lucumaGridLayoutPositions!]!
}

"""
on_conflict condition type for table "lucumaGridLayoutPositions"
"""
input lucumaGridLayoutPositions_on_conflict {
  constraint: lucumaGridLayoutPositions_constraint!
  update_columns: [lucumaGridLayoutPositions_update_column!]! = []
  where: lucumaGridLayoutPositions_bool_exp
}

"""Ordering options when selecting data from "lucumaGridLayoutPositions"."""
input lucumaGridLayoutPositions_order_by {
  breakpointName: order_by
  height: order_by
  section: order_by
  tile: order_by
  userId: order_by
  width: order_by
  x: order_by
  y: order_by
}

"""primary key columns input for table: lucumaGridLayoutPositions"""
input lucumaGridLayoutPositions_pk_columns_input {
  breakpointName: breakpoint_name!
  section: grid_layout_area!
  tile: String!
  userId: String!
}

"""
select columns of table "lucumaGridLayoutPositions"
"""
enum lucumaGridLayoutPositions_select_column {
  """column name"""
  breakpointName

  """column name"""
  height

  """column name"""
  section

  """column name"""
  tile

  """column name"""
  userId

  """column name"""
  width

  """column name"""
  x

  """column name"""
  y
}

"""
input type for updating data in table "lucumaGridLayoutPositions"
"""
input lucumaGridLayoutPositions_set_input {
  breakpointName: breakpoint_name
  height: Int
  section: grid_layout_area
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""aggregate stddev on columns"""
type lucumaGridLayoutPositions_stddev_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate stddev_pop on columns"""
type lucumaGridLayoutPositions_stddev_pop_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate stddev_samp on columns"""
type lucumaGridLayoutPositions_stddev_samp_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
Streaming cursor of the table "lucumaGridLayoutPositions"
"""
input lucumaGridLayoutPositions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: lucumaGridLayoutPositions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input lucumaGridLayoutPositions_stream_cursor_value_input {
  breakpointName: breakpoint_name
  height: Int
  section: grid_layout_area
  tile: String
  userId: String
  width: Int
  x: Int
  y: Int
}

"""aggregate sum on columns"""
type lucumaGridLayoutPositions_sum_fields {
  height: Int
  width: Int
  x: Int
  y: Int
}

"""
update columns of table "lucumaGridLayoutPositions"
"""
enum lucumaGridLayoutPositions_update_column {
  """column name"""
  breakpointName

  """column name"""
  height

  """column name"""
  section

  """column name"""
  tile

  """column name"""
  userId

  """column name"""
  width

  """column name"""
  x

  """column name"""
  y
}

input lucumaGridLayoutPositions_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: lucumaGridLayoutPositions_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: lucumaGridLayoutPositions_set_input
  where: lucumaGridLayoutPositions_bool_exp!
}

"""aggregate var_pop on columns"""
type lucumaGridLayoutPositions_var_pop_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate var_samp on columns"""
type lucumaGridLayoutPositions_var_samp_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""aggregate variance on columns"""
type lucumaGridLayoutPositions_variance_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
columns and relationships of "lucumaItcPlotPreferences"
"""
type lucumaItcPlotPreferences {
  chartType: itc_chart_type!
  detailsOpen: Boolean!

  """An object relationship"""
  lucuma_observation: lucumaObservation!
  observationId: String!
  userId: String!
}

"""
aggregated selection of "lucumaItcPlotPreferences"
"""
type lucumaItcPlotPreferences_aggregate {
  aggregate: lucumaItcPlotPreferences_aggregate_fields
  nodes: [lucumaItcPlotPreferences!]!
}

"""
aggregate fields of "lucumaItcPlotPreferences"
"""
type lucumaItcPlotPreferences_aggregate_fields {
  count(columns: [lucumaItcPlotPreferences_select_column!], distinct: Boolean): Int!
  max: lucumaItcPlotPreferences_max_fields
  min: lucumaItcPlotPreferences_min_fields
}

"""
order by aggregate values of table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_aggregate_order_by {
  count: order_by
  max: lucumaItcPlotPreferences_max_order_by
  min: lucumaItcPlotPreferences_min_order_by
}

"""
input type for inserting array relation for remote table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_arr_rel_insert_input {
  data: [lucumaItcPlotPreferences_insert_input!]!

  """upsert condition"""
  on_conflict: lucumaItcPlotPreferences_on_conflict
}

"""
Boolean expression to filter rows from the table "lucumaItcPlotPreferences". All fields are combined with a logical 'AND'.
"""
input lucumaItcPlotPreferences_bool_exp {
  _and: [lucumaItcPlotPreferences_bool_exp!]
  _not: lucumaItcPlotPreferences_bool_exp
  _or: [lucumaItcPlotPreferences_bool_exp!]
  chartType: itc_chart_type_comparison_exp
  detailsOpen: Boolean_comparison_exp
  lucuma_observation: lucumaObservation_bool_exp
  observationId: String_comparison_exp
  userId: String_comparison_exp
}

"""
unique or primary key constraints on table "lucumaItcPlotPreferences"
"""
enum lucumaItcPlotPreferences_constraint {
  """
  unique or primary key constraint on columns "observationId", "userId"
  """
  lucuma_itc_plot_preferences_pkey
}

"""
input type for inserting data into table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_insert_input {
  chartType: itc_chart_type
  detailsOpen: Boolean
  lucuma_observation: lucumaObservation_obj_rel_insert_input
  observationId: String
  userId: String
}

"""aggregate max on columns"""
type lucumaItcPlotPreferences_max_fields {
  chartType: itc_chart_type
  observationId: String
  userId: String
}

"""
order by max() on columns of table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_max_order_by {
  chartType: order_by
  observationId: order_by
  userId: order_by
}

"""aggregate min on columns"""
type lucumaItcPlotPreferences_min_fields {
  chartType: itc_chart_type
  observationId: String
  userId: String
}

"""
order by min() on columns of table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_min_order_by {
  chartType: order_by
  observationId: order_by
  userId: order_by
}

"""
response of any mutation on the table "lucumaItcPlotPreferences"
"""
type lucumaItcPlotPreferences_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lucumaItcPlotPreferences!]!
}

"""
on_conflict condition type for table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_on_conflict {
  constraint: lucumaItcPlotPreferences_constraint!
  update_columns: [lucumaItcPlotPreferences_update_column!]! = []
  where: lucumaItcPlotPreferences_bool_exp
}

"""Ordering options when selecting data from "lucumaItcPlotPreferences"."""
input lucumaItcPlotPreferences_order_by {
  chartType: order_by
  detailsOpen: order_by
  lucuma_observation: lucumaObservation_order_by
  observationId: order_by
  userId: order_by
}

"""primary key columns input for table: lucumaItcPlotPreferences"""
input lucumaItcPlotPreferences_pk_columns_input {
  observationId: String!
  userId: String!
}

"""
select columns of table "lucumaItcPlotPreferences"
"""
enum lucumaItcPlotPreferences_select_column {
  """column name"""
  chartType

  """column name"""
  detailsOpen

  """column name"""
  observationId

  """column name"""
  userId
}

"""
input type for updating data in table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_set_input {
  chartType: itc_chart_type
  detailsOpen: Boolean
  observationId: String
  userId: String
}

"""
Streaming cursor of the table "lucumaItcPlotPreferences"
"""
input lucumaItcPlotPreferences_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: lucumaItcPlotPreferences_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input lucumaItcPlotPreferences_stream_cursor_value_input {
  chartType: itc_chart_type
  detailsOpen: Boolean
  observationId: String
  userId: String
}

"""
update columns of table "lucumaItcPlotPreferences"
"""
enum lucumaItcPlotPreferences_update_column {
  """column name"""
  chartType

  """column name"""
  detailsOpen

  """column name"""
  observationId

  """column name"""
  userId
}

input lucumaItcPlotPreferences_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: lucumaItcPlotPreferences_set_input
  where: lucumaItcPlotPreferences_bool_exp!
}

"""
columns and relationships of "lucumaObservation"
"""
type lucumaObservation {
  """An array relationship"""
  lucuma_itc_plot_preferences(
    """distinct select on columns"""
    distinct_on: [lucumaItcPlotPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaItcPlotPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaItcPlotPreferences_bool_exp
  ): [lucumaItcPlotPreferences!]!

  """An aggregate relationship"""
  lucuma_itc_plot_preferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaItcPlotPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaItcPlotPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaItcPlotPreferences_bool_exp
  ): lucumaItcPlotPreferences_aggregate!
  observationId: String!
}

"""
aggregated selection of "lucumaObservation"
"""
type lucumaObservation_aggregate {
  aggregate: lucumaObservation_aggregate_fields
  nodes: [lucumaObservation!]!
}

"""
aggregate fields of "lucumaObservation"
"""
type lucumaObservation_aggregate_fields {
  count(columns: [lucumaObservation_select_column!], distinct: Boolean): Int!
  max: lucumaObservation_max_fields
  min: lucumaObservation_min_fields
}

"""
Boolean expression to filter rows from the table "lucumaObservation". All fields are combined with a logical 'AND'.
"""
input lucumaObservation_bool_exp {
  _and: [lucumaObservation_bool_exp!]
  _not: lucumaObservation_bool_exp
  _or: [lucumaObservation_bool_exp!]
  lucuma_itc_plot_preferences: lucumaItcPlotPreferences_bool_exp
  observationId: String_comparison_exp
}

"""
unique or primary key constraints on table "lucumaObservation"
"""
enum lucumaObservation_constraint {
  """
  unique or primary key constraint on columns "observationId"
  """
  lucuma_observation_pkey
}

"""
input type for inserting data into table "lucumaObservation"
"""
input lucumaObservation_insert_input {
  lucuma_itc_plot_preferences: lucumaItcPlotPreferences_arr_rel_insert_input
  observationId: String
}

"""aggregate max on columns"""
type lucumaObservation_max_fields {
  observationId: String
}

"""aggregate min on columns"""
type lucumaObservation_min_fields {
  observationId: String
}

"""
response of any mutation on the table "lucumaObservation"
"""
type lucumaObservation_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lucumaObservation!]!
}

"""
input type for inserting object relation for remote table "lucumaObservation"
"""
input lucumaObservation_obj_rel_insert_input {
  data: lucumaObservation_insert_input!

  """upsert condition"""
  on_conflict: lucumaObservation_on_conflict
}

"""
on_conflict condition type for table "lucumaObservation"
"""
input lucumaObservation_on_conflict {
  constraint: lucumaObservation_constraint!
  update_columns: [lucumaObservation_update_column!]! = []
  where: lucumaObservation_bool_exp
}

"""Ordering options when selecting data from "lucumaObservation"."""
input lucumaObservation_order_by {
  lucuma_itc_plot_preferences_aggregate: lucumaItcPlotPreferences_aggregate_order_by
  observationId: order_by
}

"""primary key columns input for table: lucumaObservation"""
input lucumaObservation_pk_columns_input {
  observationId: String!
}

"""
select columns of table "lucumaObservation"
"""
enum lucumaObservation_select_column {
  """column name"""
  observationId
}

"""
input type for updating data in table "lucumaObservation"
"""
input lucumaObservation_set_input {
  observationId: String
}

"""
Streaming cursor of the table "lucumaObservation"
"""
input lucumaObservation_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: lucumaObservation_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input lucumaObservation_stream_cursor_value_input {
  observationId: String
}

"""
update columns of table "lucumaObservation"
"""
enum lucumaObservation_update_column {
  """column name"""
  observationId
}

input lucumaObservation_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: lucumaObservation_set_input
  where: lucumaObservation_bool_exp!
}

"""
columns and relationships of "lucumaResizableWidth"
"""
type lucumaResizableWidth {
  section: resizable_area!
  userId: String!
  width: Int!
}

"""
aggregated selection of "lucumaResizableWidth"
"""
type lucumaResizableWidth_aggregate {
  aggregate: lucumaResizableWidth_aggregate_fields
  nodes: [lucumaResizableWidth!]!
}

"""
aggregate fields of "lucumaResizableWidth"
"""
type lucumaResizableWidth_aggregate_fields {
  avg: lucumaResizableWidth_avg_fields
  count(columns: [lucumaResizableWidth_select_column!], distinct: Boolean): Int!
  max: lucumaResizableWidth_max_fields
  min: lucumaResizableWidth_min_fields
  stddev: lucumaResizableWidth_stddev_fields
  stddev_pop: lucumaResizableWidth_stddev_pop_fields
  stddev_samp: lucumaResizableWidth_stddev_samp_fields
  sum: lucumaResizableWidth_sum_fields
  var_pop: lucumaResizableWidth_var_pop_fields
  var_samp: lucumaResizableWidth_var_samp_fields
  variance: lucumaResizableWidth_variance_fields
}

"""aggregate avg on columns"""
type lucumaResizableWidth_avg_fields {
  width: Float
}

"""
Boolean expression to filter rows from the table "lucumaResizableWidth". All fields are combined with a logical 'AND'.
"""
input lucumaResizableWidth_bool_exp {
  _and: [lucumaResizableWidth_bool_exp!]
  _not: lucumaResizableWidth_bool_exp
  _or: [lucumaResizableWidth_bool_exp!]
  section: resizable_area_comparison_exp
  userId: String_comparison_exp
  width: Int_comparison_exp
}

"""
unique or primary key constraints on table "lucumaResizableWidth"
"""
enum lucumaResizableWidth_constraint {
  """
  unique or primary key constraint on columns "section", "userId"
  """
  explore_resizable_width_pkey
}

"""
input type for incrementing numeric columns in table "lucumaResizableWidth"
"""
input lucumaResizableWidth_inc_input {
  width: Int
}

"""
input type for inserting data into table "lucumaResizableWidth"
"""
input lucumaResizableWidth_insert_input {
  section: resizable_area
  userId: String
  width: Int
}

"""aggregate max on columns"""
type lucumaResizableWidth_max_fields {
  section: resizable_area
  userId: String
  width: Int
}

"""aggregate min on columns"""
type lucumaResizableWidth_min_fields {
  section: resizable_area
  userId: String
  width: Int
}

"""
response of any mutation on the table "lucumaResizableWidth"
"""
type lucumaResizableWidth_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lucumaResizableWidth!]!
}

"""
on_conflict condition type for table "lucumaResizableWidth"
"""
input lucumaResizableWidth_on_conflict {
  constraint: lucumaResizableWidth_constraint!
  update_columns: [lucumaResizableWidth_update_column!]! = []
  where: lucumaResizableWidth_bool_exp
}

"""Ordering options when selecting data from "lucumaResizableWidth"."""
input lucumaResizableWidth_order_by {
  section: order_by
  userId: order_by
  width: order_by
}

"""primary key columns input for table: lucumaResizableWidth"""
input lucumaResizableWidth_pk_columns_input {
  section: resizable_area!
  userId: String!
}

"""
select columns of table "lucumaResizableWidth"
"""
enum lucumaResizableWidth_select_column {
  """column name"""
  section

  """column name"""
  userId

  """column name"""
  width
}

"""
input type for updating data in table "lucumaResizableWidth"
"""
input lucumaResizableWidth_set_input {
  section: resizable_area
  userId: String
  width: Int
}

"""aggregate stddev on columns"""
type lucumaResizableWidth_stddev_fields {
  width: Float
}

"""aggregate stddev_pop on columns"""
type lucumaResizableWidth_stddev_pop_fields {
  width: Float
}

"""aggregate stddev_samp on columns"""
type lucumaResizableWidth_stddev_samp_fields {
  width: Float
}

"""
Streaming cursor of the table "lucumaResizableWidth"
"""
input lucumaResizableWidth_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: lucumaResizableWidth_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input lucumaResizableWidth_stream_cursor_value_input {
  section: resizable_area
  userId: String
  width: Int
}

"""aggregate sum on columns"""
type lucumaResizableWidth_sum_fields {
  width: Int
}

"""
update columns of table "lucumaResizableWidth"
"""
enum lucumaResizableWidth_update_column {
  """column name"""
  section

  """column name"""
  userId

  """column name"""
  width
}

input lucumaResizableWidth_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: lucumaResizableWidth_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: lucumaResizableWidth_set_input
  where: lucumaResizableWidth_bool_exp!
}

"""aggregate var_pop on columns"""
type lucumaResizableWidth_var_pop_fields {
  width: Float
}

"""aggregate var_samp on columns"""
type lucumaResizableWidth_var_samp_fields {
  width: Float
}

"""aggregate variance on columns"""
type lucumaResizableWidth_variance_fields {
  width: Float
}

"""
columns and relationships of "lucumaTarget"
"""
type lucumaTarget {
  """An array relationship"""
  lucuma_target_preferences(
    """distinct select on columns"""
    distinct_on: [lucumaTargetPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaTargetPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaTargetPreferences_bool_exp
  ): [lucumaTargetPreferences!]!

  """An aggregate relationship"""
  lucuma_target_preferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaTargetPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaTargetPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaTargetPreferences_bool_exp
  ): lucumaTargetPreferences_aggregate!
  targetId: String!
}

"""
columns and relationships of "lucumaTargetPreferences"
"""
type lucumaTargetPreferences {
  agsCandidates: Boolean
  agsOverlay: Boolean
  fovDec: bigint
  fovRA: bigint
  fullScreen: Boolean

  """An object relationship"""
  lucuma_target: lucumaTarget!
  targetId: String!
  userId: String!
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
aggregated selection of "lucumaTargetPreferences"
"""
type lucumaTargetPreferences_aggregate {
  aggregate: lucumaTargetPreferences_aggregate_fields
  nodes: [lucumaTargetPreferences!]!
}

"""
aggregate fields of "lucumaTargetPreferences"
"""
type lucumaTargetPreferences_aggregate_fields {
  avg: lucumaTargetPreferences_avg_fields
  count(columns: [lucumaTargetPreferences_select_column!], distinct: Boolean): Int!
  max: lucumaTargetPreferences_max_fields
  min: lucumaTargetPreferences_min_fields
  stddev: lucumaTargetPreferences_stddev_fields
  stddev_pop: lucumaTargetPreferences_stddev_pop_fields
  stddev_samp: lucumaTargetPreferences_stddev_samp_fields
  sum: lucumaTargetPreferences_sum_fields
  var_pop: lucumaTargetPreferences_var_pop_fields
  var_samp: lucumaTargetPreferences_var_samp_fields
  variance: lucumaTargetPreferences_variance_fields
}

"""
order by aggregate values of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_aggregate_order_by {
  avg: lucumaTargetPreferences_avg_order_by
  count: order_by
  max: lucumaTargetPreferences_max_order_by
  min: lucumaTargetPreferences_min_order_by
  stddev: lucumaTargetPreferences_stddev_order_by
  stddev_pop: lucumaTargetPreferences_stddev_pop_order_by
  stddev_samp: lucumaTargetPreferences_stddev_samp_order_by
  sum: lucumaTargetPreferences_sum_order_by
  var_pop: lucumaTargetPreferences_var_pop_order_by
  var_samp: lucumaTargetPreferences_var_samp_order_by
  variance: lucumaTargetPreferences_variance_order_by
}

"""
input type for inserting array relation for remote table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_arr_rel_insert_input {
  data: [lucumaTargetPreferences_insert_input!]!

  """upsert condition"""
  on_conflict: lucumaTargetPreferences_on_conflict
}

"""aggregate avg on columns"""
type lucumaTargetPreferences_avg_fields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by avg() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_avg_order_by {
  fovDec: order_by
  fovRA: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""
Boolean expression to filter rows from the table "lucumaTargetPreferences". All fields are combined with a logical 'AND'.
"""
input lucumaTargetPreferences_bool_exp {
  _and: [lucumaTargetPreferences_bool_exp!]
  _not: lucumaTargetPreferences_bool_exp
  _or: [lucumaTargetPreferences_bool_exp!]
  agsCandidates: Boolean_comparison_exp
  agsOverlay: Boolean_comparison_exp
  fovDec: bigint_comparison_exp
  fovRA: bigint_comparison_exp
  fullScreen: Boolean_comparison_exp
  lucuma_target: lucumaTarget_bool_exp
  targetId: String_comparison_exp
  userId: String_comparison_exp
  viewOffsetP: bigint_comparison_exp
  viewOffsetQ: bigint_comparison_exp
}

"""
unique or primary key constraints on table "lucumaTargetPreferences"
"""
enum lucumaTargetPreferences_constraint {
  """
  unique or primary key constraint on columns "targetId", "userId"
  """
  lucuma_target_preferences_pkey
}

"""
input type for incrementing numeric columns in table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_inc_input {
  fovDec: bigint
  fovRA: bigint
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
input type for inserting data into table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_insert_input {
  agsCandidates: Boolean
  agsOverlay: Boolean
  fovDec: bigint
  fovRA: bigint
  fullScreen: Boolean
  lucuma_target: lucumaTarget_obj_rel_insert_input
  targetId: String
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""aggregate max on columns"""
type lucumaTargetPreferences_max_fields {
  fovDec: bigint
  fovRA: bigint
  targetId: String
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
order by max() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_max_order_by {
  fovDec: order_by
  fovRA: order_by
  targetId: order_by
  userId: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""aggregate min on columns"""
type lucumaTargetPreferences_min_fields {
  fovDec: bigint
  fovRA: bigint
  targetId: String
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
order by min() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_min_order_by {
  fovDec: order_by
  fovRA: order_by
  targetId: order_by
  userId: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""
response of any mutation on the table "lucumaTargetPreferences"
"""
type lucumaTargetPreferences_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lucumaTargetPreferences!]!
}

"""
on_conflict condition type for table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_on_conflict {
  constraint: lucumaTargetPreferences_constraint!
  update_columns: [lucumaTargetPreferences_update_column!]! = []
  where: lucumaTargetPreferences_bool_exp
}

"""Ordering options when selecting data from "lucumaTargetPreferences"."""
input lucumaTargetPreferences_order_by {
  agsCandidates: order_by
  agsOverlay: order_by
  fovDec: order_by
  fovRA: order_by
  fullScreen: order_by
  lucuma_target: lucumaTarget_order_by
  targetId: order_by
  userId: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""primary key columns input for table: lucumaTargetPreferences"""
input lucumaTargetPreferences_pk_columns_input {
  targetId: String!
  userId: String!
}

"""
select columns of table "lucumaTargetPreferences"
"""
enum lucumaTargetPreferences_select_column {
  """column name"""
  agsCandidates

  """column name"""
  agsOverlay

  """column name"""
  fovDec

  """column name"""
  fovRA

  """column name"""
  fullScreen

  """column name"""
  targetId

  """column name"""
  userId

  """column name"""
  viewOffsetP

  """column name"""
  viewOffsetQ
}

"""
input type for updating data in table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_set_input {
  agsCandidates: Boolean
  agsOverlay: Boolean
  fovDec: bigint
  fovRA: bigint
  fullScreen: Boolean
  targetId: String
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""aggregate stddev on columns"""
type lucumaTargetPreferences_stddev_fields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by stddev() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_stddev_order_by {
  fovDec: order_by
  fovRA: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""aggregate stddev_pop on columns"""
type lucumaTargetPreferences_stddev_pop_fields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by stddev_pop() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_stddev_pop_order_by {
  fovDec: order_by
  fovRA: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""aggregate stddev_samp on columns"""
type lucumaTargetPreferences_stddev_samp_fields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by stddev_samp() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_stddev_samp_order_by {
  fovDec: order_by
  fovRA: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""
Streaming cursor of the table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: lucumaTargetPreferences_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input lucumaTargetPreferences_stream_cursor_value_input {
  agsCandidates: Boolean
  agsOverlay: Boolean
  fovDec: bigint
  fovRA: bigint
  fullScreen: Boolean
  targetId: String
  userId: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""aggregate sum on columns"""
type lucumaTargetPreferences_sum_fields {
  fovDec: bigint
  fovRA: bigint
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
order by sum() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_sum_order_by {
  fovDec: order_by
  fovRA: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""
update columns of table "lucumaTargetPreferences"
"""
enum lucumaTargetPreferences_update_column {
  """column name"""
  agsCandidates

  """column name"""
  agsOverlay

  """column name"""
  fovDec

  """column name"""
  fovRA

  """column name"""
  fullScreen

  """column name"""
  targetId

  """column name"""
  userId

  """column name"""
  viewOffsetP

  """column name"""
  viewOffsetQ
}

input lucumaTargetPreferences_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: lucumaTargetPreferences_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: lucumaTargetPreferences_set_input
  where: lucumaTargetPreferences_bool_exp!
}

"""aggregate var_pop on columns"""
type lucumaTargetPreferences_var_pop_fields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by var_pop() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_var_pop_order_by {
  fovDec: order_by
  fovRA: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""aggregate var_samp on columns"""
type lucumaTargetPreferences_var_samp_fields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by var_samp() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_var_samp_order_by {
  fovDec: order_by
  fovRA: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""aggregate variance on columns"""
type lucumaTargetPreferences_variance_fields {
  fovDec: Float
  fovRA: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by variance() on columns of table "lucumaTargetPreferences"
"""
input lucumaTargetPreferences_variance_order_by {
  fovDec: order_by
  fovRA: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""
aggregated selection of "lucumaTarget"
"""
type lucumaTarget_aggregate {
  aggregate: lucumaTarget_aggregate_fields
  nodes: [lucumaTarget!]!
}

"""
aggregate fields of "lucumaTarget"
"""
type lucumaTarget_aggregate_fields {
  count(columns: [lucumaTarget_select_column!], distinct: Boolean): Int!
  max: lucumaTarget_max_fields
  min: lucumaTarget_min_fields
}

"""
Boolean expression to filter rows from the table "lucumaTarget". All fields are combined with a logical 'AND'.
"""
input lucumaTarget_bool_exp {
  _and: [lucumaTarget_bool_exp!]
  _not: lucumaTarget_bool_exp
  _or: [lucumaTarget_bool_exp!]
  lucuma_target_preferences: lucumaTargetPreferences_bool_exp
  targetId: String_comparison_exp
}

"""
unique or primary key constraints on table "lucumaTarget"
"""
enum lucumaTarget_constraint {
  """
  unique or primary key constraint on columns "targetId"
  """
  lucuma_target_pkey
}

"""
input type for inserting data into table "lucumaTarget"
"""
input lucumaTarget_insert_input {
  lucuma_target_preferences: lucumaTargetPreferences_arr_rel_insert_input
  targetId: String
}

"""aggregate max on columns"""
type lucumaTarget_max_fields {
  targetId: String
}

"""aggregate min on columns"""
type lucumaTarget_min_fields {
  targetId: String
}

"""
response of any mutation on the table "lucumaTarget"
"""
type lucumaTarget_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lucumaTarget!]!
}

"""
input type for inserting object relation for remote table "lucumaTarget"
"""
input lucumaTarget_obj_rel_insert_input {
  data: lucumaTarget_insert_input!

  """upsert condition"""
  on_conflict: lucumaTarget_on_conflict
}

"""
on_conflict condition type for table "lucumaTarget"
"""
input lucumaTarget_on_conflict {
  constraint: lucumaTarget_constraint!
  update_columns: [lucumaTarget_update_column!]! = []
  where: lucumaTarget_bool_exp
}

"""Ordering options when selecting data from "lucumaTarget"."""
input lucumaTarget_order_by {
  lucuma_target_preferences_aggregate: lucumaTargetPreferences_aggregate_order_by
  targetId: order_by
}

"""primary key columns input for table: lucumaTarget"""
input lucumaTarget_pk_columns_input {
  targetId: String!
}

"""
select columns of table "lucumaTarget"
"""
enum lucumaTarget_select_column {
  """column name"""
  targetId
}

"""
input type for updating data in table "lucumaTarget"
"""
input lucumaTarget_set_input {
  targetId: String
}

"""
Streaming cursor of the table "lucumaTarget"
"""
input lucumaTarget_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: lucumaTarget_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input lucumaTarget_stream_cursor_value_input {
  targetId: String
}

"""
update columns of table "lucumaTarget"
"""
enum lucumaTarget_update_column {
  """column name"""
  targetId
}

input lucumaTarget_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: lucumaTarget_set_input
  where: lucumaTarget_bool_exp!
}

"""
columns and relationships of "lucumaUser"
"""
type lucumaUser {
  userId: String!
}

"""
columns and relationships of "lucumaUserPreferences"
"""
type lucumaUserPreferences {
  aladinMouseScroll: Boolean
  elevationPlotRange: elevation_plot_range
  elevationPlotTime: elevation_plot_time

  """An object relationship"""
  lucuma_user: lucumaUser!
  userId: String!
}

"""
aggregated selection of "lucumaUserPreferences"
"""
type lucumaUserPreferences_aggregate {
  aggregate: lucumaUserPreferences_aggregate_fields
  nodes: [lucumaUserPreferences!]!
}

"""
aggregate fields of "lucumaUserPreferences"
"""
type lucumaUserPreferences_aggregate_fields {
  count(columns: [lucumaUserPreferences_select_column!], distinct: Boolean): Int!
  max: lucumaUserPreferences_max_fields
  min: lucumaUserPreferences_min_fields
}

"""
Boolean expression to filter rows from the table "lucumaUserPreferences". All fields are combined with a logical 'AND'.
"""
input lucumaUserPreferences_bool_exp {
  _and: [lucumaUserPreferences_bool_exp!]
  _not: lucumaUserPreferences_bool_exp
  _or: [lucumaUserPreferences_bool_exp!]
  aladinMouseScroll: Boolean_comparison_exp
  elevationPlotRange: elevation_plot_range_comparison_exp
  elevationPlotTime: elevation_plot_time_comparison_exp
  lucuma_user: lucumaUser_bool_exp
  userId: String_comparison_exp
}

"""
unique or primary key constraints on table "lucumaUserPreferences"
"""
enum lucumaUserPreferences_constraint {
  """
  unique or primary key constraint on columns "userId"
  """
  lucuma_user_preferences_pkey
}

"""
input type for inserting data into table "lucumaUserPreferences"
"""
input lucumaUserPreferences_insert_input {
  aladinMouseScroll: Boolean
  elevationPlotRange: elevation_plot_range
  elevationPlotTime: elevation_plot_time
  lucuma_user: lucumaUser_obj_rel_insert_input
  userId: String
}

"""aggregate max on columns"""
type lucumaUserPreferences_max_fields {
  elevationPlotRange: elevation_plot_range
  elevationPlotTime: elevation_plot_time
  userId: String
}

"""aggregate min on columns"""
type lucumaUserPreferences_min_fields {
  elevationPlotRange: elevation_plot_range
  elevationPlotTime: elevation_plot_time
  userId: String
}

"""
response of any mutation on the table "lucumaUserPreferences"
"""
type lucumaUserPreferences_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lucumaUserPreferences!]!
}

"""
on_conflict condition type for table "lucumaUserPreferences"
"""
input lucumaUserPreferences_on_conflict {
  constraint: lucumaUserPreferences_constraint!
  update_columns: [lucumaUserPreferences_update_column!]! = []
  where: lucumaUserPreferences_bool_exp
}

"""Ordering options when selecting data from "lucumaUserPreferences"."""
input lucumaUserPreferences_order_by {
  aladinMouseScroll: order_by
  elevationPlotRange: order_by
  elevationPlotTime: order_by
  lucuma_user: lucumaUser_order_by
  userId: order_by
}

"""primary key columns input for table: lucumaUserPreferences"""
input lucumaUserPreferences_pk_columns_input {
  userId: String!
}

"""
select columns of table "lucumaUserPreferences"
"""
enum lucumaUserPreferences_select_column {
  """column name"""
  aladinMouseScroll

  """column name"""
  elevationPlotRange

  """column name"""
  elevationPlotTime

  """column name"""
  userId
}

"""
input type for updating data in table "lucumaUserPreferences"
"""
input lucumaUserPreferences_set_input {
  aladinMouseScroll: Boolean
  elevationPlotRange: elevation_plot_range
  elevationPlotTime: elevation_plot_time
  userId: String
}

"""
Streaming cursor of the table "lucumaUserPreferences"
"""
input lucumaUserPreferences_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: lucumaUserPreferences_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input lucumaUserPreferences_stream_cursor_value_input {
  aladinMouseScroll: Boolean
  elevationPlotRange: elevation_plot_range
  elevationPlotTime: elevation_plot_time
  userId: String
}

"""
update columns of table "lucumaUserPreferences"
"""
enum lucumaUserPreferences_update_column {
  """column name"""
  aladinMouseScroll

  """column name"""
  elevationPlotRange

  """column name"""
  elevationPlotTime

  """column name"""
  userId
}

input lucumaUserPreferences_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: lucumaUserPreferences_set_input
  where: lucumaUserPreferences_bool_exp!
}

"""
aggregated selection of "lucumaUser"
"""
type lucumaUser_aggregate {
  aggregate: lucumaUser_aggregate_fields
  nodes: [lucumaUser!]!
}

"""
aggregate fields of "lucumaUser"
"""
type lucumaUser_aggregate_fields {
  count(columns: [lucumaUser_select_column!], distinct: Boolean): Int!
  max: lucumaUser_max_fields
  min: lucumaUser_min_fields
}

"""
Boolean expression to filter rows from the table "lucumaUser". All fields are combined with a logical 'AND'.
"""
input lucumaUser_bool_exp {
  _and: [lucumaUser_bool_exp!]
  _not: lucumaUser_bool_exp
  _or: [lucumaUser_bool_exp!]
  userId: String_comparison_exp
}

"""
unique or primary key constraints on table "lucumaUser"
"""
enum lucumaUser_constraint {
  """
  unique or primary key constraint on columns "userId"
  """
  lucuma_user_pkey
}

"""
input type for inserting data into table "lucumaUser"
"""
input lucumaUser_insert_input {
  userId: String
}

"""aggregate max on columns"""
type lucumaUser_max_fields {
  userId: String
}

"""aggregate min on columns"""
type lucumaUser_min_fields {
  userId: String
}

"""
response of any mutation on the table "lucumaUser"
"""
type lucumaUser_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lucumaUser!]!
}

"""
input type for inserting object relation for remote table "lucumaUser"
"""
input lucumaUser_obj_rel_insert_input {
  data: lucumaUser_insert_input!

  """upsert condition"""
  on_conflict: lucumaUser_on_conflict
}

"""
on_conflict condition type for table "lucumaUser"
"""
input lucumaUser_on_conflict {
  constraint: lucumaUser_constraint!
  update_columns: [lucumaUser_update_column!]! = []
  where: lucumaUser_bool_exp
}

"""Ordering options when selecting data from "lucumaUser"."""
input lucumaUser_order_by {
  userId: order_by
}

"""primary key columns input for table: lucumaUser"""
input lucumaUser_pk_columns_input {
  userId: String!
}

"""
select columns of table "lucumaUser"
"""
enum lucumaUser_select_column {
  """column name"""
  userId
}

"""
input type for updating data in table "lucumaUser"
"""
input lucumaUser_set_input {
  userId: String
}

"""
Streaming cursor of the table "lucumaUser"
"""
input lucumaUser_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: lucumaUser_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input lucumaUser_stream_cursor_value_input {
  userId: String
}

"""
update columns of table "lucumaUser"
"""
enum lucumaUser_update_column {
  """column name"""
  userId
}

input lucumaUser_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: lucumaUser_set_input
  where: lucumaUser_bool_exp!
}

"""mutation root"""
type Mutation {
  """
  delete data from the table: "lucumaGridLayoutPositions"
  """
  delete_lucumaGridLayoutPositions(
    """filter the rows which have to be deleted"""
    where: lucumaGridLayoutPositions_bool_exp!
  ): lucumaGridLayoutPositions_mutation_response

  """
  delete single row from the table: "lucumaGridLayoutPositions"
  """
  delete_lucumaGridLayoutPositions_by_pk(breakpointName: breakpoint_name!, section: grid_layout_area!, tile: String!, userId: String!): lucumaGridLayoutPositions

  """
  delete data from the table: "lucumaItcPlotPreferences"
  """
  delete_lucumaItcPlotPreferences(
    """filter the rows which have to be deleted"""
    where: lucumaItcPlotPreferences_bool_exp!
  ): lucumaItcPlotPreferences_mutation_response

  """
  delete single row from the table: "lucumaItcPlotPreferences"
  """
  delete_lucumaItcPlotPreferences_by_pk(observationId: String!, userId: String!): lucumaItcPlotPreferences

  """
  delete data from the table: "lucumaObservation"
  """
  delete_lucumaObservation(
    """filter the rows which have to be deleted"""
    where: lucumaObservation_bool_exp!
  ): lucumaObservation_mutation_response

  """
  delete single row from the table: "lucumaObservation"
  """
  delete_lucumaObservation_by_pk(observationId: String!): lucumaObservation

  """
  delete data from the table: "lucumaResizableWidth"
  """
  delete_lucumaResizableWidth(
    """filter the rows which have to be deleted"""
    where: lucumaResizableWidth_bool_exp!
  ): lucumaResizableWidth_mutation_response

  """
  delete single row from the table: "lucumaResizableWidth"
  """
  delete_lucumaResizableWidth_by_pk(section: resizable_area!, userId: String!): lucumaResizableWidth

  """
  delete data from the table: "lucumaTarget"
  """
  delete_lucumaTarget(
    """filter the rows which have to be deleted"""
    where: lucumaTarget_bool_exp!
  ): lucumaTarget_mutation_response

  """
  delete data from the table: "lucumaTargetPreferences"
  """
  delete_lucumaTargetPreferences(
    """filter the rows which have to be deleted"""
    where: lucumaTargetPreferences_bool_exp!
  ): lucumaTargetPreferences_mutation_response

  """
  delete single row from the table: "lucumaTargetPreferences"
  """
  delete_lucumaTargetPreferences_by_pk(targetId: String!, userId: String!): lucumaTargetPreferences

  """
  delete single row from the table: "lucumaTarget"
  """
  delete_lucumaTarget_by_pk(targetId: String!): lucumaTarget

  """
  delete data from the table: "lucumaUser"
  """
  delete_lucumaUser(
    """filter the rows which have to be deleted"""
    where: lucumaUser_bool_exp!
  ): lucumaUser_mutation_response

  """
  delete data from the table: "lucumaUserPreferences"
  """
  delete_lucumaUserPreferences(
    """filter the rows which have to be deleted"""
    where: lucumaUserPreferences_bool_exp!
  ): lucumaUserPreferences_mutation_response

  """
  delete single row from the table: "lucumaUserPreferences"
  """
  delete_lucumaUserPreferences_by_pk(userId: String!): lucumaUserPreferences

  """
  delete single row from the table: "lucumaUser"
  """
  delete_lucumaUser_by_pk(userId: String!): lucumaUser

  """
  insert data into the table: "lucumaGridLayoutPositions"
  """
  insert_lucumaGridLayoutPositions(
    """the rows to be inserted"""
    objects: [lucumaGridLayoutPositions_insert_input!]!

    """upsert condition"""
    on_conflict: lucumaGridLayoutPositions_on_conflict
  ): lucumaGridLayoutPositions_mutation_response

  """
  insert a single row into the table: "lucumaGridLayoutPositions"
  """
  insert_lucumaGridLayoutPositions_one(
    """the row to be inserted"""
    object: lucumaGridLayoutPositions_insert_input!

    """upsert condition"""
    on_conflict: lucumaGridLayoutPositions_on_conflict
  ): lucumaGridLayoutPositions

  """
  insert data into the table: "lucumaItcPlotPreferences"
  """
  insert_lucumaItcPlotPreferences(
    """the rows to be inserted"""
    objects: [lucumaItcPlotPreferences_insert_input!]!

    """upsert condition"""
    on_conflict: lucumaItcPlotPreferences_on_conflict
  ): lucumaItcPlotPreferences_mutation_response

  """
  insert a single row into the table: "lucumaItcPlotPreferences"
  """
  insert_lucumaItcPlotPreferences_one(
    """the row to be inserted"""
    object: lucumaItcPlotPreferences_insert_input!

    """upsert condition"""
    on_conflict: lucumaItcPlotPreferences_on_conflict
  ): lucumaItcPlotPreferences

  """
  insert data into the table: "lucumaObservation"
  """
  insert_lucumaObservation(
    """the rows to be inserted"""
    objects: [lucumaObservation_insert_input!]!

    """upsert condition"""
    on_conflict: lucumaObservation_on_conflict
  ): lucumaObservation_mutation_response

  """
  insert a single row into the table: "lucumaObservation"
  """
  insert_lucumaObservation_one(
    """the row to be inserted"""
    object: lucumaObservation_insert_input!

    """upsert condition"""
    on_conflict: lucumaObservation_on_conflict
  ): lucumaObservation

  """
  insert data into the table: "lucumaResizableWidth"
  """
  insert_lucumaResizableWidth(
    """the rows to be inserted"""
    objects: [lucumaResizableWidth_insert_input!]!

    """upsert condition"""
    on_conflict: lucumaResizableWidth_on_conflict
  ): lucumaResizableWidth_mutation_response

  """
  insert a single row into the table: "lucumaResizableWidth"
  """
  insert_lucumaResizableWidth_one(
    """the row to be inserted"""
    object: lucumaResizableWidth_insert_input!

    """upsert condition"""
    on_conflict: lucumaResizableWidth_on_conflict
  ): lucumaResizableWidth

  """
  insert data into the table: "lucumaTarget"
  """
  insert_lucumaTarget(
    """the rows to be inserted"""
    objects: [lucumaTarget_insert_input!]!

    """upsert condition"""
    on_conflict: lucumaTarget_on_conflict
  ): lucumaTarget_mutation_response

  """
  insert data into the table: "lucumaTargetPreferences"
  """
  insert_lucumaTargetPreferences(
    """the rows to be inserted"""
    objects: [lucumaTargetPreferences_insert_input!]!

    """upsert condition"""
    on_conflict: lucumaTargetPreferences_on_conflict
  ): lucumaTargetPreferences_mutation_response

  """
  insert a single row into the table: "lucumaTargetPreferences"
  """
  insert_lucumaTargetPreferences_one(
    """the row to be inserted"""
    object: lucumaTargetPreferences_insert_input!

    """upsert condition"""
    on_conflict: lucumaTargetPreferences_on_conflict
  ): lucumaTargetPreferences

  """
  insert a single row into the table: "lucumaTarget"
  """
  insert_lucumaTarget_one(
    """the row to be inserted"""
    object: lucumaTarget_insert_input!

    """upsert condition"""
    on_conflict: lucumaTarget_on_conflict
  ): lucumaTarget

  """
  insert data into the table: "lucumaUser"
  """
  insert_lucumaUser(
    """the rows to be inserted"""
    objects: [lucumaUser_insert_input!]!

    """upsert condition"""
    on_conflict: lucumaUser_on_conflict
  ): lucumaUser_mutation_response

  """
  insert data into the table: "lucumaUserPreferences"
  """
  insert_lucumaUserPreferences(
    """the rows to be inserted"""
    objects: [lucumaUserPreferences_insert_input!]!

    """upsert condition"""
    on_conflict: lucumaUserPreferences_on_conflict
  ): lucumaUserPreferences_mutation_response

  """
  insert a single row into the table: "lucumaUserPreferences"
  """
  insert_lucumaUserPreferences_one(
    """the row to be inserted"""
    object: lucumaUserPreferences_insert_input!

    """upsert condition"""
    on_conflict: lucumaUserPreferences_on_conflict
  ): lucumaUserPreferences

  """
  insert a single row into the table: "lucumaUser"
  """
  insert_lucumaUser_one(
    """the row to be inserted"""
    object: lucumaUser_insert_input!

    """upsert condition"""
    on_conflict: lucumaUser_on_conflict
  ): lucumaUser

  """
  update data of the table: "lucumaGridLayoutPositions"
  """
  update_lucumaGridLayoutPositions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lucumaGridLayoutPositions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lucumaGridLayoutPositions_set_input

    """filter the rows which have to be updated"""
    where: lucumaGridLayoutPositions_bool_exp!
  ): lucumaGridLayoutPositions_mutation_response

  """
  update single row of the table: "lucumaGridLayoutPositions"
  """
  update_lucumaGridLayoutPositions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lucumaGridLayoutPositions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lucumaGridLayoutPositions_set_input
    pk_columns: lucumaGridLayoutPositions_pk_columns_input!
  ): lucumaGridLayoutPositions

  """
  update multiples rows of table: "lucumaGridLayoutPositions"
  """
  update_lucumaGridLayoutPositions_many(
    """updates to execute, in order"""
    updates: [lucumaGridLayoutPositions_updates!]!
  ): [lucumaGridLayoutPositions_mutation_response]

  """
  update data of the table: "lucumaItcPlotPreferences"
  """
  update_lucumaItcPlotPreferences(
    """sets the columns of the filtered rows to the given values"""
    _set: lucumaItcPlotPreferences_set_input

    """filter the rows which have to be updated"""
    where: lucumaItcPlotPreferences_bool_exp!
  ): lucumaItcPlotPreferences_mutation_response

  """
  update single row of the table: "lucumaItcPlotPreferences"
  """
  update_lucumaItcPlotPreferences_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: lucumaItcPlotPreferences_set_input
    pk_columns: lucumaItcPlotPreferences_pk_columns_input!
  ): lucumaItcPlotPreferences

  """
  update multiples rows of table: "lucumaItcPlotPreferences"
  """
  update_lucumaItcPlotPreferences_many(
    """updates to execute, in order"""
    updates: [lucumaItcPlotPreferences_updates!]!
  ): [lucumaItcPlotPreferences_mutation_response]

  """
  update data of the table: "lucumaObservation"
  """
  update_lucumaObservation(
    """sets the columns of the filtered rows to the given values"""
    _set: lucumaObservation_set_input

    """filter the rows which have to be updated"""
    where: lucumaObservation_bool_exp!
  ): lucumaObservation_mutation_response

  """
  update single row of the table: "lucumaObservation"
  """
  update_lucumaObservation_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: lucumaObservation_set_input
    pk_columns: lucumaObservation_pk_columns_input!
  ): lucumaObservation

  """
  update multiples rows of table: "lucumaObservation"
  """
  update_lucumaObservation_many(
    """updates to execute, in order"""
    updates: [lucumaObservation_updates!]!
  ): [lucumaObservation_mutation_response]

  """
  update data of the table: "lucumaResizableWidth"
  """
  update_lucumaResizableWidth(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lucumaResizableWidth_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lucumaResizableWidth_set_input

    """filter the rows which have to be updated"""
    where: lucumaResizableWidth_bool_exp!
  ): lucumaResizableWidth_mutation_response

  """
  update single row of the table: "lucumaResizableWidth"
  """
  update_lucumaResizableWidth_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lucumaResizableWidth_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lucumaResizableWidth_set_input
    pk_columns: lucumaResizableWidth_pk_columns_input!
  ): lucumaResizableWidth

  """
  update multiples rows of table: "lucumaResizableWidth"
  """
  update_lucumaResizableWidth_many(
    """updates to execute, in order"""
    updates: [lucumaResizableWidth_updates!]!
  ): [lucumaResizableWidth_mutation_response]

  """
  update data of the table: "lucumaTarget"
  """
  update_lucumaTarget(
    """sets the columns of the filtered rows to the given values"""
    _set: lucumaTarget_set_input

    """filter the rows which have to be updated"""
    where: lucumaTarget_bool_exp!
  ): lucumaTarget_mutation_response

  """
  update data of the table: "lucumaTargetPreferences"
  """
  update_lucumaTargetPreferences(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lucumaTargetPreferences_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lucumaTargetPreferences_set_input

    """filter the rows which have to be updated"""
    where: lucumaTargetPreferences_bool_exp!
  ): lucumaTargetPreferences_mutation_response

  """
  update single row of the table: "lucumaTargetPreferences"
  """
  update_lucumaTargetPreferences_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lucumaTargetPreferences_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lucumaTargetPreferences_set_input
    pk_columns: lucumaTargetPreferences_pk_columns_input!
  ): lucumaTargetPreferences

  """
  update multiples rows of table: "lucumaTargetPreferences"
  """
  update_lucumaTargetPreferences_many(
    """updates to execute, in order"""
    updates: [lucumaTargetPreferences_updates!]!
  ): [lucumaTargetPreferences_mutation_response]

  """
  update single row of the table: "lucumaTarget"
  """
  update_lucumaTarget_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: lucumaTarget_set_input
    pk_columns: lucumaTarget_pk_columns_input!
  ): lucumaTarget

  """
  update multiples rows of table: "lucumaTarget"
  """
  update_lucumaTarget_many(
    """updates to execute, in order"""
    updates: [lucumaTarget_updates!]!
  ): [lucumaTarget_mutation_response]

  """
  update data of the table: "lucumaUser"
  """
  update_lucumaUser(
    """sets the columns of the filtered rows to the given values"""
    _set: lucumaUser_set_input

    """filter the rows which have to be updated"""
    where: lucumaUser_bool_exp!
  ): lucumaUser_mutation_response

  """
  update data of the table: "lucumaUserPreferences"
  """
  update_lucumaUserPreferences(
    """sets the columns of the filtered rows to the given values"""
    _set: lucumaUserPreferences_set_input

    """filter the rows which have to be updated"""
    where: lucumaUserPreferences_bool_exp!
  ): lucumaUserPreferences_mutation_response

  """
  update single row of the table: "lucumaUserPreferences"
  """
  update_lucumaUserPreferences_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: lucumaUserPreferences_set_input
    pk_columns: lucumaUserPreferences_pk_columns_input!
  ): lucumaUserPreferences

  """
  update multiples rows of table: "lucumaUserPreferences"
  """
  update_lucumaUserPreferences_many(
    """updates to execute, in order"""
    updates: [lucumaUserPreferences_updates!]!
  ): [lucumaUserPreferences_mutation_response]

  """
  update single row of the table: "lucumaUser"
  """
  update_lucumaUser_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: lucumaUser_set_input
    pk_columns: lucumaUser_pk_columns_input!
  ): lucumaUser

  """
  update multiples rows of table: "lucumaUser"
  """
  update_lucumaUser_many(
    """updates to execute, in order"""
    updates: [lucumaUser_updates!]!
  ): [lucumaUser_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type Query {
  """
  fetch data from the table: "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositions(
    """distinct select on columns"""
    distinct_on: [lucumaGridLayoutPositions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaGridLayoutPositions_order_by!]

    """filter the rows returned"""
    where: lucumaGridLayoutPositions_bool_exp
  ): [lucumaGridLayoutPositions!]!

  """
  fetch aggregated fields from the table: "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositions_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaGridLayoutPositions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaGridLayoutPositions_order_by!]

    """filter the rows returned"""
    where: lucumaGridLayoutPositions_bool_exp
  ): lucumaGridLayoutPositions_aggregate!

  """
  fetch data from the table: "lucumaGridLayoutPositions" using primary key columns
  """
  lucumaGridLayoutPositions_by_pk(breakpointName: breakpoint_name!, section: grid_layout_area!, tile: String!, userId: String!): lucumaGridLayoutPositions

  """
  fetch data from the table: "lucumaItcPlotPreferences"
  """
  lucumaItcPlotPreferences(
    """distinct select on columns"""
    distinct_on: [lucumaItcPlotPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaItcPlotPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaItcPlotPreferences_bool_exp
  ): [lucumaItcPlotPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaItcPlotPreferences"
  """
  lucumaItcPlotPreferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaItcPlotPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaItcPlotPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaItcPlotPreferences_bool_exp
  ): lucumaItcPlotPreferences_aggregate!

  """
  fetch data from the table: "lucumaItcPlotPreferences" using primary key columns
  """
  lucumaItcPlotPreferences_by_pk(observationId: String!, userId: String!): lucumaItcPlotPreferences

  """
  fetch data from the table: "lucumaObservation"
  """
  lucumaObservation(
    """distinct select on columns"""
    distinct_on: [lucumaObservation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaObservation_order_by!]

    """filter the rows returned"""
    where: lucumaObservation_bool_exp
  ): [lucumaObservation!]!

  """
  fetch aggregated fields from the table: "lucumaObservation"
  """
  lucumaObservation_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaObservation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaObservation_order_by!]

    """filter the rows returned"""
    where: lucumaObservation_bool_exp
  ): lucumaObservation_aggregate!

  """
  fetch data from the table: "lucumaObservation" using primary key columns
  """
  lucumaObservation_by_pk(observationId: String!): lucumaObservation

  """
  fetch data from the table: "lucumaResizableWidth"
  """
  lucumaResizableWidth(
    """distinct select on columns"""
    distinct_on: [lucumaResizableWidth_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaResizableWidth_order_by!]

    """filter the rows returned"""
    where: lucumaResizableWidth_bool_exp
  ): [lucumaResizableWidth!]!

  """
  fetch aggregated fields from the table: "lucumaResizableWidth"
  """
  lucumaResizableWidth_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaResizableWidth_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaResizableWidth_order_by!]

    """filter the rows returned"""
    where: lucumaResizableWidth_bool_exp
  ): lucumaResizableWidth_aggregate!

  """
  fetch data from the table: "lucumaResizableWidth" using primary key columns
  """
  lucumaResizableWidth_by_pk(section: resizable_area!, userId: String!): lucumaResizableWidth

  """
  fetch data from the table: "lucumaTarget"
  """
  lucumaTarget(
    """distinct select on columns"""
    distinct_on: [lucumaTarget_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaTarget_order_by!]

    """filter the rows returned"""
    where: lucumaTarget_bool_exp
  ): [lucumaTarget!]!

  """
  fetch data from the table: "lucumaTargetPreferences"
  """
  lucumaTargetPreferences(
    """distinct select on columns"""
    distinct_on: [lucumaTargetPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaTargetPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaTargetPreferences_bool_exp
  ): [lucumaTargetPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaTargetPreferences"
  """
  lucumaTargetPreferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaTargetPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaTargetPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaTargetPreferences_bool_exp
  ): lucumaTargetPreferences_aggregate!

  """
  fetch data from the table: "lucumaTargetPreferences" using primary key columns
  """
  lucumaTargetPreferences_by_pk(targetId: String!, userId: String!): lucumaTargetPreferences

  """
  fetch aggregated fields from the table: "lucumaTarget"
  """
  lucumaTarget_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaTarget_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaTarget_order_by!]

    """filter the rows returned"""
    where: lucumaTarget_bool_exp
  ): lucumaTarget_aggregate!

  """fetch data from the table: "lucumaTarget" using primary key columns"""
  lucumaTarget_by_pk(targetId: String!): lucumaTarget

  """
  fetch data from the table: "lucumaUser"
  """
  lucumaUser(
    """distinct select on columns"""
    distinct_on: [lucumaUser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaUser_order_by!]

    """filter the rows returned"""
    where: lucumaUser_bool_exp
  ): [lucumaUser!]!

  """
  fetch data from the table: "lucumaUserPreferences"
  """
  lucumaUserPreferences(
    """distinct select on columns"""
    distinct_on: [lucumaUserPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaUserPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaUserPreferences_bool_exp
  ): [lucumaUserPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaUserPreferences"
  """
  lucumaUserPreferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaUserPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaUserPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaUserPreferences_bool_exp
  ): lucumaUserPreferences_aggregate!

  """
  fetch data from the table: "lucumaUserPreferences" using primary key columns
  """
  lucumaUserPreferences_by_pk(userId: String!): lucumaUserPreferences

  """
  fetch aggregated fields from the table: "lucumaUser"
  """
  lucumaUser_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaUser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaUser_order_by!]

    """filter the rows returned"""
    where: lucumaUser_bool_exp
  ): lucumaUser_aggregate!

  """fetch data from the table: "lucumaUser" using primary key columns"""
  lucumaUser_by_pk(userId: String!): lucumaUser
}

scalar resizable_area

"""
Boolean expression to compare columns of type "resizable_area". All fields are combined with logical 'AND'.
"""
input resizable_area_comparison_exp {
  _eq: resizable_area
  _gt: resizable_area
  _gte: resizable_area
  _in: [resizable_area!]
  _is_null: Boolean
  _lt: resizable_area
  _lte: resizable_area
  _neq: resizable_area
  _nin: [resizable_area!]
}

type Subscription {
  """
  fetch data from the table: "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositions(
    """distinct select on columns"""
    distinct_on: [lucumaGridLayoutPositions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaGridLayoutPositions_order_by!]

    """filter the rows returned"""
    where: lucumaGridLayoutPositions_bool_exp
  ): [lucumaGridLayoutPositions!]!

  """
  fetch aggregated fields from the table: "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositions_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaGridLayoutPositions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaGridLayoutPositions_order_by!]

    """filter the rows returned"""
    where: lucumaGridLayoutPositions_bool_exp
  ): lucumaGridLayoutPositions_aggregate!

  """
  fetch data from the table: "lucumaGridLayoutPositions" using primary key columns
  """
  lucumaGridLayoutPositions_by_pk(breakpointName: breakpoint_name!, section: grid_layout_area!, tile: String!, userId: String!): lucumaGridLayoutPositions

  """
  fetch data from the table in a streaming manner : "lucumaGridLayoutPositions"
  """
  lucumaGridLayoutPositions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaGridLayoutPositions_stream_cursor_input]!

    """filter the rows returned"""
    where: lucumaGridLayoutPositions_bool_exp
  ): [lucumaGridLayoutPositions!]!

  """
  fetch data from the table: "lucumaItcPlotPreferences"
  """
  lucumaItcPlotPreferences(
    """distinct select on columns"""
    distinct_on: [lucumaItcPlotPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaItcPlotPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaItcPlotPreferences_bool_exp
  ): [lucumaItcPlotPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaItcPlotPreferences"
  """
  lucumaItcPlotPreferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaItcPlotPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaItcPlotPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaItcPlotPreferences_bool_exp
  ): lucumaItcPlotPreferences_aggregate!

  """
  fetch data from the table: "lucumaItcPlotPreferences" using primary key columns
  """
  lucumaItcPlotPreferences_by_pk(observationId: String!, userId: String!): lucumaItcPlotPreferences

  """
  fetch data from the table in a streaming manner : "lucumaItcPlotPreferences"
  """
  lucumaItcPlotPreferences_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaItcPlotPreferences_stream_cursor_input]!

    """filter the rows returned"""
    where: lucumaItcPlotPreferences_bool_exp
  ): [lucumaItcPlotPreferences!]!

  """
  fetch data from the table: "lucumaObservation"
  """
  lucumaObservation(
    """distinct select on columns"""
    distinct_on: [lucumaObservation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaObservation_order_by!]

    """filter the rows returned"""
    where: lucumaObservation_bool_exp
  ): [lucumaObservation!]!

  """
  fetch aggregated fields from the table: "lucumaObservation"
  """
  lucumaObservation_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaObservation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaObservation_order_by!]

    """filter the rows returned"""
    where: lucumaObservation_bool_exp
  ): lucumaObservation_aggregate!

  """
  fetch data from the table: "lucumaObservation" using primary key columns
  """
  lucumaObservation_by_pk(observationId: String!): lucumaObservation

  """
  fetch data from the table in a streaming manner : "lucumaObservation"
  """
  lucumaObservation_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaObservation_stream_cursor_input]!

    """filter the rows returned"""
    where: lucumaObservation_bool_exp
  ): [lucumaObservation!]!

  """
  fetch data from the table: "lucumaResizableWidth"
  """
  lucumaResizableWidth(
    """distinct select on columns"""
    distinct_on: [lucumaResizableWidth_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaResizableWidth_order_by!]

    """filter the rows returned"""
    where: lucumaResizableWidth_bool_exp
  ): [lucumaResizableWidth!]!

  """
  fetch aggregated fields from the table: "lucumaResizableWidth"
  """
  lucumaResizableWidth_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaResizableWidth_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaResizableWidth_order_by!]

    """filter the rows returned"""
    where: lucumaResizableWidth_bool_exp
  ): lucumaResizableWidth_aggregate!

  """
  fetch data from the table: "lucumaResizableWidth" using primary key columns
  """
  lucumaResizableWidth_by_pk(section: resizable_area!, userId: String!): lucumaResizableWidth

  """
  fetch data from the table in a streaming manner : "lucumaResizableWidth"
  """
  lucumaResizableWidth_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaResizableWidth_stream_cursor_input]!

    """filter the rows returned"""
    where: lucumaResizableWidth_bool_exp
  ): [lucumaResizableWidth!]!

  """
  fetch data from the table: "lucumaTarget"
  """
  lucumaTarget(
    """distinct select on columns"""
    distinct_on: [lucumaTarget_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaTarget_order_by!]

    """filter the rows returned"""
    where: lucumaTarget_bool_exp
  ): [lucumaTarget!]!

  """
  fetch data from the table: "lucumaTargetPreferences"
  """
  lucumaTargetPreferences(
    """distinct select on columns"""
    distinct_on: [lucumaTargetPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaTargetPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaTargetPreferences_bool_exp
  ): [lucumaTargetPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaTargetPreferences"
  """
  lucumaTargetPreferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaTargetPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaTargetPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaTargetPreferences_bool_exp
  ): lucumaTargetPreferences_aggregate!

  """
  fetch data from the table: "lucumaTargetPreferences" using primary key columns
  """
  lucumaTargetPreferences_by_pk(targetId: String!, userId: String!): lucumaTargetPreferences

  """
  fetch data from the table in a streaming manner : "lucumaTargetPreferences"
  """
  lucumaTargetPreferences_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaTargetPreferences_stream_cursor_input]!

    """filter the rows returned"""
    where: lucumaTargetPreferences_bool_exp
  ): [lucumaTargetPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaTarget"
  """
  lucumaTarget_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaTarget_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaTarget_order_by!]

    """filter the rows returned"""
    where: lucumaTarget_bool_exp
  ): lucumaTarget_aggregate!

  """fetch data from the table: "lucumaTarget" using primary key columns"""
  lucumaTarget_by_pk(targetId: String!): lucumaTarget

  """
  fetch data from the table in a streaming manner : "lucumaTarget"
  """
  lucumaTarget_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaTarget_stream_cursor_input]!

    """filter the rows returned"""
    where: lucumaTarget_bool_exp
  ): [lucumaTarget!]!

  """
  fetch data from the table: "lucumaUser"
  """
  lucumaUser(
    """distinct select on columns"""
    distinct_on: [lucumaUser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaUser_order_by!]

    """filter the rows returned"""
    where: lucumaUser_bool_exp
  ): [lucumaUser!]!

  """
  fetch data from the table: "lucumaUserPreferences"
  """
  lucumaUserPreferences(
    """distinct select on columns"""
    distinct_on: [lucumaUserPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaUserPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaUserPreferences_bool_exp
  ): [lucumaUserPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaUserPreferences"
  """
  lucumaUserPreferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaUserPreferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaUserPreferences_order_by!]

    """filter the rows returned"""
    where: lucumaUserPreferences_bool_exp
  ): lucumaUserPreferences_aggregate!

  """
  fetch data from the table: "lucumaUserPreferences" using primary key columns
  """
  lucumaUserPreferences_by_pk(userId: String!): lucumaUserPreferences

  """
  fetch data from the table in a streaming manner : "lucumaUserPreferences"
  """
  lucumaUserPreferences_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaUserPreferences_stream_cursor_input]!

    """filter the rows returned"""
    where: lucumaUserPreferences_bool_exp
  ): [lucumaUserPreferences!]!

  """
  fetch aggregated fields from the table: "lucumaUser"
  """
  lucumaUser_aggregate(
    """distinct select on columns"""
    distinct_on: [lucumaUser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucumaUser_order_by!]

    """filter the rows returned"""
    where: lucumaUser_bool_exp
  ): lucumaUser_aggregate!

  """fetch data from the table: "lucumaUser" using primary key columns"""
  lucumaUser_by_pk(userId: String!): lucumaUser

  """
  fetch data from the table in a streaming manner : "lucumaUser"
  """
  lucumaUser_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [lucumaUser_stream_cursor_input]!

    """filter the rows returned"""
    where: lucumaUser_bool_exp
  ): [lucumaUser!]!
}

