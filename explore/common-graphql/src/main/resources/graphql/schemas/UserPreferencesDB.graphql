
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar breakpoint_name

"""
expression to compare columns of type breakpoint_name. All fields are combined with logical 'AND'.
"""
input breakpoint_name_comparison_exp {
  _eq: breakpoint_name
  _gt: breakpoint_name
  _gte: breakpoint_name
  _in: [breakpoint_name!]
  _is_null: Boolean
  _lt: breakpoint_name
  _lte: breakpoint_name
  _neq: breakpoint_name
  _nin: [breakpoint_name!]
}

scalar elevation_plot_range

"""
expression to compare columns of type elevation_plot_range. All fields are combined with logical 'AND'.
"""
input elevation_plot_range_comparison_exp {
  _eq: elevation_plot_range
  _gt: elevation_plot_range
  _gte: elevation_plot_range
  _in: [elevation_plot_range!]
  _is_null: Boolean
  _lt: elevation_plot_range
  _lte: elevation_plot_range
  _neq: elevation_plot_range
  _nin: [elevation_plot_range!]
}

scalar elevation_plot_time

"""
expression to compare columns of type elevation_plot_time. All fields are combined with logical 'AND'.
"""
input elevation_plot_time_comparison_exp {
  _eq: elevation_plot_time
  _gt: elevation_plot_time
  _gte: elevation_plot_time
  _in: [elevation_plot_time!]
  _is_null: Boolean
  _lt: elevation_plot_time
  _lte: elevation_plot_time
  _neq: elevation_plot_time
  _nin: [elevation_plot_time!]
}

"""
columns and relationships of "explore_resizable_width"
"""
type explore_resizable_width {
  section: resizable_area!
  user_id: String!
  width: Int!
}

"""
aggregated selection of "explore_resizable_width"
"""
type explore_resizable_width_aggregate {
  aggregate: explore_resizable_width_aggregate_fields
  nodes: [explore_resizable_width!]!
}

"""
aggregate fields of "explore_resizable_width"
"""
type explore_resizable_width_aggregate_fields {
  avg: explore_resizable_width_avg_fields
  count(columns: [explore_resizable_width_select_column!], distinct: Boolean): Int
  max: explore_resizable_width_max_fields
  min: explore_resizable_width_min_fields
  stddev: explore_resizable_width_stddev_fields
  stddev_pop: explore_resizable_width_stddev_pop_fields
  stddev_samp: explore_resizable_width_stddev_samp_fields
  sum: explore_resizable_width_sum_fields
  var_pop: explore_resizable_width_var_pop_fields
  var_samp: explore_resizable_width_var_samp_fields
  variance: explore_resizable_width_variance_fields
}

"""
order by aggregate values of table "explore_resizable_width"
"""
input explore_resizable_width_aggregate_order_by {
  avg: explore_resizable_width_avg_order_by
  count: order_by
  max: explore_resizable_width_max_order_by
  min: explore_resizable_width_min_order_by
  stddev: explore_resizable_width_stddev_order_by
  stddev_pop: explore_resizable_width_stddev_pop_order_by
  stddev_samp: explore_resizable_width_stddev_samp_order_by
  sum: explore_resizable_width_sum_order_by
  var_pop: explore_resizable_width_var_pop_order_by
  var_samp: explore_resizable_width_var_samp_order_by
  variance: explore_resizable_width_variance_order_by
}

"""
input type for inserting array relation for remote table "explore_resizable_width"
"""
input explore_resizable_width_arr_rel_insert_input {
  data: [explore_resizable_width_insert_input!]!
  on_conflict: explore_resizable_width_on_conflict
}

"""aggregate avg on columns"""
type explore_resizable_width_avg_fields {
  width: Float
}

"""
order by avg() on columns of table "explore_resizable_width"
"""
input explore_resizable_width_avg_order_by {
  width: order_by
}

"""
Boolean expression to filter rows from the table "explore_resizable_width". All fields are combined with a logical 'AND'.
"""
input explore_resizable_width_bool_exp {
  _and: [explore_resizable_width_bool_exp]
  _not: explore_resizable_width_bool_exp
  _or: [explore_resizable_width_bool_exp]
  section: resizable_area_comparison_exp
  user_id: String_comparison_exp
  width: Int_comparison_exp
}

"""
unique or primary key constraints on table "explore_resizable_width"
"""
enum explore_resizable_width_constraint {
  """unique or primary key constraint"""
  explore_resizable_width_pkey
}

"""
input type for incrementing integer column in table "explore_resizable_width"
"""
input explore_resizable_width_inc_input {
  width: Int
}

"""
input type for inserting data into table "explore_resizable_width"
"""
input explore_resizable_width_insert_input {
  section: resizable_area
  user_id: String
  width: Int
}

"""aggregate max on columns"""
type explore_resizable_width_max_fields {
  user_id: String
  width: Int
}

"""
order by max() on columns of table "explore_resizable_width"
"""
input explore_resizable_width_max_order_by {
  user_id: order_by
  width: order_by
}

"""aggregate min on columns"""
type explore_resizable_width_min_fields {
  user_id: String
  width: Int
}

"""
order by min() on columns of table "explore_resizable_width"
"""
input explore_resizable_width_min_order_by {
  user_id: order_by
  width: order_by
}

"""
response of any mutation on the table "explore_resizable_width"
"""
type explore_resizable_width_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [explore_resizable_width!]!
}

"""
input type for inserting object relation for remote table "explore_resizable_width"
"""
input explore_resizable_width_obj_rel_insert_input {
  data: explore_resizable_width_insert_input!
  on_conflict: explore_resizable_width_on_conflict
}

"""
on conflict condition type for table "explore_resizable_width"
"""
input explore_resizable_width_on_conflict {
  constraint: explore_resizable_width_constraint!
  update_columns: [explore_resizable_width_update_column!]!
  where: explore_resizable_width_bool_exp
}

"""
ordering options when selecting data from "explore_resizable_width"
"""
input explore_resizable_width_order_by {
  section: order_by
  user_id: order_by
  width: order_by
}

"""
primary key columns input for table: "explore_resizable_width"
"""
input explore_resizable_width_pk_columns_input {
  section: resizable_area!
  user_id: String!
}

"""
select columns of table "explore_resizable_width"
"""
enum explore_resizable_width_select_column {
  """column name"""
  section

  """column name"""
  user_id

  """column name"""
  width
}

"""
input type for updating data in table "explore_resizable_width"
"""
input explore_resizable_width_set_input {
  section: resizable_area
  user_id: String
  width: Int
}

"""aggregate stddev on columns"""
type explore_resizable_width_stddev_fields {
  width: Float
}

"""
order by stddev() on columns of table "explore_resizable_width"
"""
input explore_resizable_width_stddev_order_by {
  width: order_by
}

"""aggregate stddev_pop on columns"""
type explore_resizable_width_stddev_pop_fields {
  width: Float
}

"""
order by stddev_pop() on columns of table "explore_resizable_width"
"""
input explore_resizable_width_stddev_pop_order_by {
  width: order_by
}

"""aggregate stddev_samp on columns"""
type explore_resizable_width_stddev_samp_fields {
  width: Float
}

"""
order by stddev_samp() on columns of table "explore_resizable_width"
"""
input explore_resizable_width_stddev_samp_order_by {
  width: order_by
}

"""aggregate sum on columns"""
type explore_resizable_width_sum_fields {
  width: Int
}

"""
order by sum() on columns of table "explore_resizable_width"
"""
input explore_resizable_width_sum_order_by {
  width: order_by
}

"""
update columns of table "explore_resizable_width"
"""
enum explore_resizable_width_update_column {
  """column name"""
  section

  """column name"""
  user_id

  """column name"""
  width
}

"""aggregate var_pop on columns"""
type explore_resizable_width_var_pop_fields {
  width: Float
}

"""
order by var_pop() on columns of table "explore_resizable_width"
"""
input explore_resizable_width_var_pop_order_by {
  width: order_by
}

"""aggregate var_samp on columns"""
type explore_resizable_width_var_samp_fields {
  width: Float
}

"""
order by var_samp() on columns of table "explore_resizable_width"
"""
input explore_resizable_width_var_samp_order_by {
  width: order_by
}

"""aggregate variance on columns"""
type explore_resizable_width_variance_fields {
  width: Float
}

"""
order by variance() on columns of table "explore_resizable_width"
"""
input explore_resizable_width_variance_order_by {
  width: order_by
}

scalar grid_layout_area

"""
expression to compare columns of type grid_layout_area. All fields are combined with logical 'AND'.
"""
input grid_layout_area_comparison_exp {
  _eq: grid_layout_area
  _gt: grid_layout_area
  _gte: grid_layout_area
  _in: [grid_layout_area!]
  _is_null: Boolean
  _lt: grid_layout_area
  _lte: grid_layout_area
  _neq: grid_layout_area
  _nin: [grid_layout_area!]
}

"""
columns and relationships of "grid_layout_positions"
"""
type grid_layout_positions {
  breakpoint_name: breakpoint_name!
  height: Int!
  section: grid_layout_area!
  tile: String!
  user_id: String!
  width: Int!
  x: Int!
  y: Int!
}

"""
aggregated selection of "grid_layout_positions"
"""
type grid_layout_positions_aggregate {
  aggregate: grid_layout_positions_aggregate_fields
  nodes: [grid_layout_positions!]!
}

"""
aggregate fields of "grid_layout_positions"
"""
type grid_layout_positions_aggregate_fields {
  avg: grid_layout_positions_avg_fields
  count(columns: [grid_layout_positions_select_column!], distinct: Boolean): Int
  max: grid_layout_positions_max_fields
  min: grid_layout_positions_min_fields
  stddev: grid_layout_positions_stddev_fields
  stddev_pop: grid_layout_positions_stddev_pop_fields
  stddev_samp: grid_layout_positions_stddev_samp_fields
  sum: grid_layout_positions_sum_fields
  var_pop: grid_layout_positions_var_pop_fields
  var_samp: grid_layout_positions_var_samp_fields
  variance: grid_layout_positions_variance_fields
}

"""
order by aggregate values of table "grid_layout_positions"
"""
input grid_layout_positions_aggregate_order_by {
  avg: grid_layout_positions_avg_order_by
  count: order_by
  max: grid_layout_positions_max_order_by
  min: grid_layout_positions_min_order_by
  stddev: grid_layout_positions_stddev_order_by
  stddev_pop: grid_layout_positions_stddev_pop_order_by
  stddev_samp: grid_layout_positions_stddev_samp_order_by
  sum: grid_layout_positions_sum_order_by
  var_pop: grid_layout_positions_var_pop_order_by
  var_samp: grid_layout_positions_var_samp_order_by
  variance: grid_layout_positions_variance_order_by
}

"""
input type for inserting array relation for remote table "grid_layout_positions"
"""
input grid_layout_positions_arr_rel_insert_input {
  data: [grid_layout_positions_insert_input!]!
  on_conflict: grid_layout_positions_on_conflict
}

"""aggregate avg on columns"""
type grid_layout_positions_avg_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
order by avg() on columns of table "grid_layout_positions"
"""
input grid_layout_positions_avg_order_by {
  height: order_by
  width: order_by
  x: order_by
  y: order_by
}

"""
Boolean expression to filter rows from the table "grid_layout_positions". All fields are combined with a logical 'AND'.
"""
input grid_layout_positions_bool_exp {
  _and: [grid_layout_positions_bool_exp]
  _not: grid_layout_positions_bool_exp
  _or: [grid_layout_positions_bool_exp]
  breakpoint_name: breakpoint_name_comparison_exp
  height: Int_comparison_exp
  section: grid_layout_area_comparison_exp
  tile: String_comparison_exp
  user_id: String_comparison_exp
  width: Int_comparison_exp
  x: Int_comparison_exp
  y: Int_comparison_exp
}

"""
unique or primary key constraints on table "grid_layout_positions"
"""
enum grid_layout_positions_constraint {
  """unique or primary key constraint"""
  grid_layout_positions_pkey
}

"""
input type for incrementing integer column in table "grid_layout_positions"
"""
input grid_layout_positions_inc_input {
  height: Int
  width: Int
  x: Int
  y: Int
}

"""
input type for inserting data into table "grid_layout_positions"
"""
input grid_layout_positions_insert_input {
  breakpoint_name: breakpoint_name
  height: Int
  section: grid_layout_area
  tile: String
  user_id: String
  width: Int
  x: Int
  y: Int
}

"""aggregate max on columns"""
type grid_layout_positions_max_fields {
  height: Int
  tile: String
  user_id: String
  width: Int
  x: Int
  y: Int
}

"""
order by max() on columns of table "grid_layout_positions"
"""
input grid_layout_positions_max_order_by {
  height: order_by
  tile: order_by
  user_id: order_by
  width: order_by
  x: order_by
  y: order_by
}

"""aggregate min on columns"""
type grid_layout_positions_min_fields {
  height: Int
  tile: String
  user_id: String
  width: Int
  x: Int
  y: Int
}

"""
order by min() on columns of table "grid_layout_positions"
"""
input grid_layout_positions_min_order_by {
  height: order_by
  tile: order_by
  user_id: order_by
  width: order_by
  x: order_by
  y: order_by
}

"""
response of any mutation on the table "grid_layout_positions"
"""
type grid_layout_positions_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [grid_layout_positions!]!
}

"""
input type for inserting object relation for remote table "grid_layout_positions"
"""
input grid_layout_positions_obj_rel_insert_input {
  data: grid_layout_positions_insert_input!
  on_conflict: grid_layout_positions_on_conflict
}

"""
on conflict condition type for table "grid_layout_positions"
"""
input grid_layout_positions_on_conflict {
  constraint: grid_layout_positions_constraint!
  update_columns: [grid_layout_positions_update_column!]!
  where: grid_layout_positions_bool_exp
}

"""
ordering options when selecting data from "grid_layout_positions"
"""
input grid_layout_positions_order_by {
  breakpoint_name: order_by
  height: order_by
  section: order_by
  tile: order_by
  user_id: order_by
  width: order_by
  x: order_by
  y: order_by
}

"""
primary key columns input for table: "grid_layout_positions"
"""
input grid_layout_positions_pk_columns_input {
  breakpoint_name: breakpoint_name!
  section: grid_layout_area!
  tile: String!
  user_id: String!
}

"""
select columns of table "grid_layout_positions"
"""
enum grid_layout_positions_select_column {
  """column name"""
  breakpoint_name

  """column name"""
  height

  """column name"""
  section

  """column name"""
  tile

  """column name"""
  user_id

  """column name"""
  width

  """column name"""
  x

  """column name"""
  y
}

"""
input type for updating data in table "grid_layout_positions"
"""
input grid_layout_positions_set_input {
  breakpoint_name: breakpoint_name
  height: Int
  section: grid_layout_area
  tile: String
  user_id: String
  width: Int
  x: Int
  y: Int
}

"""aggregate stddev on columns"""
type grid_layout_positions_stddev_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
order by stddev() on columns of table "grid_layout_positions"
"""
input grid_layout_positions_stddev_order_by {
  height: order_by
  width: order_by
  x: order_by
  y: order_by
}

"""aggregate stddev_pop on columns"""
type grid_layout_positions_stddev_pop_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
order by stddev_pop() on columns of table "grid_layout_positions"
"""
input grid_layout_positions_stddev_pop_order_by {
  height: order_by
  width: order_by
  x: order_by
  y: order_by
}

"""aggregate stddev_samp on columns"""
type grid_layout_positions_stddev_samp_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
order by stddev_samp() on columns of table "grid_layout_positions"
"""
input grid_layout_positions_stddev_samp_order_by {
  height: order_by
  width: order_by
  x: order_by
  y: order_by
}

"""aggregate sum on columns"""
type grid_layout_positions_sum_fields {
  height: Int
  width: Int
  x: Int
  y: Int
}

"""
order by sum() on columns of table "grid_layout_positions"
"""
input grid_layout_positions_sum_order_by {
  height: order_by
  width: order_by
  x: order_by
  y: order_by
}

"""
update columns of table "grid_layout_positions"
"""
enum grid_layout_positions_update_column {
  """column name"""
  breakpoint_name

  """column name"""
  height

  """column name"""
  section

  """column name"""
  tile

  """column name"""
  user_id

  """column name"""
  width

  """column name"""
  x

  """column name"""
  y
}

"""aggregate var_pop on columns"""
type grid_layout_positions_var_pop_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
order by var_pop() on columns of table "grid_layout_positions"
"""
input grid_layout_positions_var_pop_order_by {
  height: order_by
  width: order_by
  x: order_by
  y: order_by
}

"""aggregate var_samp on columns"""
type grid_layout_positions_var_samp_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
order by var_samp() on columns of table "grid_layout_positions"
"""
input grid_layout_positions_var_samp_order_by {
  height: order_by
  width: order_by
  x: order_by
  y: order_by
}

"""aggregate variance on columns"""
type grid_layout_positions_variance_fields {
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
order by variance() on columns of table "grid_layout_positions"
"""
input grid_layout_positions_variance_order_by {
  height: order_by
  width: order_by
  x: order_by
  y: order_by
}

"""
columns and relationships of "lucuma_elevation_plot_preferences"
"""
type lucuma_elevation_plot_preferences {
  range: elevation_plot_range!
  site: site!
  target_id: String!
  time: elevation_plot_time!
  user_id: String!
}

"""
aggregated selection of "lucuma_elevation_plot_preferences"
"""
type lucuma_elevation_plot_preferences_aggregate {
  aggregate: lucuma_elevation_plot_preferences_aggregate_fields
  nodes: [lucuma_elevation_plot_preferences!]!
}

"""
aggregate fields of "lucuma_elevation_plot_preferences"
"""
type lucuma_elevation_plot_preferences_aggregate_fields {
  count(columns: [lucuma_elevation_plot_preferences_select_column!], distinct: Boolean): Int
  max: lucuma_elevation_plot_preferences_max_fields
  min: lucuma_elevation_plot_preferences_min_fields
}

"""
order by aggregate values of table "lucuma_elevation_plot_preferences"
"""
input lucuma_elevation_plot_preferences_aggregate_order_by {
  count: order_by
  max: lucuma_elevation_plot_preferences_max_order_by
  min: lucuma_elevation_plot_preferences_min_order_by
}

"""
input type for inserting array relation for remote table "lucuma_elevation_plot_preferences"
"""
input lucuma_elevation_plot_preferences_arr_rel_insert_input {
  data: [lucuma_elevation_plot_preferences_insert_input!]!
  on_conflict: lucuma_elevation_plot_preferences_on_conflict
}

"""
Boolean expression to filter rows from the table "lucuma_elevation_plot_preferences". All fields are combined with a logical 'AND'.
"""
input lucuma_elevation_plot_preferences_bool_exp {
  _and: [lucuma_elevation_plot_preferences_bool_exp]
  _not: lucuma_elevation_plot_preferences_bool_exp
  _or: [lucuma_elevation_plot_preferences_bool_exp]
  range: elevation_plot_range_comparison_exp
  site: site_comparison_exp
  target_id: String_comparison_exp
  time: elevation_plot_time_comparison_exp
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "lucuma_elevation_plot_preferences"
"""
enum lucuma_elevation_plot_preferences_constraint {
  """unique or primary key constraint"""
  lucuma_elevation_plot_preferences_pkey
}

"""
input type for inserting data into table "lucuma_elevation_plot_preferences"
"""
input lucuma_elevation_plot_preferences_insert_input {
  range: elevation_plot_range
  site: site
  target_id: String
  time: elevation_plot_time
  user_id: String
}

"""aggregate max on columns"""
type lucuma_elevation_plot_preferences_max_fields {
  target_id: String
  user_id: String
}

"""
order by max() on columns of table "lucuma_elevation_plot_preferences"
"""
input lucuma_elevation_plot_preferences_max_order_by {
  target_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type lucuma_elevation_plot_preferences_min_fields {
  target_id: String
  user_id: String
}

"""
order by min() on columns of table "lucuma_elevation_plot_preferences"
"""
input lucuma_elevation_plot_preferences_min_order_by {
  target_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "lucuma_elevation_plot_preferences"
"""
type lucuma_elevation_plot_preferences_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [lucuma_elevation_plot_preferences!]!
}

"""
input type for inserting object relation for remote table "lucuma_elevation_plot_preferences"
"""
input lucuma_elevation_plot_preferences_obj_rel_insert_input {
  data: lucuma_elevation_plot_preferences_insert_input!
  on_conflict: lucuma_elevation_plot_preferences_on_conflict
}

"""
on conflict condition type for table "lucuma_elevation_plot_preferences"
"""
input lucuma_elevation_plot_preferences_on_conflict {
  constraint: lucuma_elevation_plot_preferences_constraint!
  update_columns: [lucuma_elevation_plot_preferences_update_column!]!
  where: lucuma_elevation_plot_preferences_bool_exp
}

"""
ordering options when selecting data from "lucuma_elevation_plot_preferences"
"""
input lucuma_elevation_plot_preferences_order_by {
  range: order_by
  site: order_by
  target_id: order_by
  time: order_by
  user_id: order_by
}

"""
primary key columns input for table: "lucuma_elevation_plot_preferences"
"""
input lucuma_elevation_plot_preferences_pk_columns_input {
  target_id: String!
  user_id: String!
}

"""
select columns of table "lucuma_elevation_plot_preferences"
"""
enum lucuma_elevation_plot_preferences_select_column {
  """column name"""
  range

  """column name"""
  site

  """column name"""
  target_id

  """column name"""
  time

  """column name"""
  user_id
}

"""
input type for updating data in table "lucuma_elevation_plot_preferences"
"""
input lucuma_elevation_plot_preferences_set_input {
  range: elevation_plot_range
  site: site
  target_id: String
  time: elevation_plot_time
  user_id: String
}

"""
update columns of table "lucuma_elevation_plot_preferences"
"""
enum lucuma_elevation_plot_preferences_update_column {
  """column name"""
  range

  """column name"""
  site

  """column name"""
  target_id

  """column name"""
  time

  """column name"""
  user_id
}

"""
columns and relationships of "lucuma_target"
"""
type lucuma_target {
  """An array relationship"""
  lucuma_elevation_plot_preferences(
    """distinct select on columns"""
    distinct_on: [lucuma_elevation_plot_preferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_elevation_plot_preferences_order_by!]

    """filter the rows returned"""
    where: lucuma_elevation_plot_preferences_bool_exp
  ): [lucuma_elevation_plot_preferences!]!

  """An aggregated array relationship"""
  lucuma_elevation_plot_preferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucuma_elevation_plot_preferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_elevation_plot_preferences_order_by!]

    """filter the rows returned"""
    where: lucuma_elevation_plot_preferences_bool_exp
  ): lucuma_elevation_plot_preferences_aggregate!

  """An array relationship"""
  lucuma_target_preferences(
    """distinct select on columns"""
    distinct_on: [lucuma_target_preferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_target_preferences_order_by!]

    """filter the rows returned"""
    where: lucuma_target_preferences_bool_exp
  ): [lucuma_target_preferences!]!

  """An aggregated array relationship"""
  lucuma_target_preferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucuma_target_preferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_target_preferences_order_by!]

    """filter the rows returned"""
    where: lucuma_target_preferences_bool_exp
  ): lucuma_target_preferences_aggregate!
  target_id: String!
}

"""
aggregated selection of "lucuma_target"
"""
type lucuma_target_aggregate {
  aggregate: lucuma_target_aggregate_fields
  nodes: [lucuma_target!]!
}

"""
aggregate fields of "lucuma_target"
"""
type lucuma_target_aggregate_fields {
  count(columns: [lucuma_target_select_column!], distinct: Boolean): Int
  max: lucuma_target_max_fields
  min: lucuma_target_min_fields
}

"""
order by aggregate values of table "lucuma_target"
"""
input lucuma_target_aggregate_order_by {
  count: order_by
  max: lucuma_target_max_order_by
  min: lucuma_target_min_order_by
}

"""
input type for inserting array relation for remote table "lucuma_target"
"""
input lucuma_target_arr_rel_insert_input {
  data: [lucuma_target_insert_input!]!
  on_conflict: lucuma_target_on_conflict
}

"""
Boolean expression to filter rows from the table "lucuma_target". All fields are combined with a logical 'AND'.
"""
input lucuma_target_bool_exp {
  _and: [lucuma_target_bool_exp]
  _not: lucuma_target_bool_exp
  _or: [lucuma_target_bool_exp]
  lucuma_elevation_plot_preferences: lucuma_elevation_plot_preferences_bool_exp
  lucuma_target_preferences: lucuma_target_preferences_bool_exp
  target_id: String_comparison_exp
}

"""
unique or primary key constraints on table "lucuma_target"
"""
enum lucuma_target_constraint {
  """unique or primary key constraint"""
  lucuma_target_pkey
}

"""
input type for inserting data into table "lucuma_target"
"""
input lucuma_target_insert_input {
  lucuma_elevation_plot_preferences: lucuma_elevation_plot_preferences_arr_rel_insert_input
  lucuma_target_preferences: lucuma_target_preferences_arr_rel_insert_input
  target_id: String
}

"""aggregate max on columns"""
type lucuma_target_max_fields {
  target_id: String
}

"""
order by max() on columns of table "lucuma_target"
"""
input lucuma_target_max_order_by {
  target_id: order_by
}

"""aggregate min on columns"""
type lucuma_target_min_fields {
  target_id: String
}

"""
order by min() on columns of table "lucuma_target"
"""
input lucuma_target_min_order_by {
  target_id: order_by
}

"""
response of any mutation on the table "lucuma_target"
"""
type lucuma_target_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [lucuma_target!]!
}

"""
input type for inserting object relation for remote table "lucuma_target"
"""
input lucuma_target_obj_rel_insert_input {
  data: lucuma_target_insert_input!
  on_conflict: lucuma_target_on_conflict
}

"""
on conflict condition type for table "lucuma_target"
"""
input lucuma_target_on_conflict {
  constraint: lucuma_target_constraint!
  update_columns: [lucuma_target_update_column!]!
  where: lucuma_target_bool_exp
}

"""
ordering options when selecting data from "lucuma_target"
"""
input lucuma_target_order_by {
  lucuma_elevation_plot_preferences_aggregate: lucuma_elevation_plot_preferences_aggregate_order_by
  lucuma_target_preferences_aggregate: lucuma_target_preferences_aggregate_order_by
  target_id: order_by
}

"""
primary key columns input for table: "lucuma_target"
"""
input lucuma_target_pk_columns_input {
  target_id: String!
}

"""
columns and relationships of "lucuma_target_preferences"
"""
type lucuma_target_preferences {
  agsCandidates: Boolean!
  agsOverlay: Boolean!
  fov: bigint!

  """An object relationship"""
  lucuma_target: lucuma_target!
  target_id: String!
  user_id: String!
  viewOffsetP: bigint!
  viewOffsetQ: bigint!
}

"""
aggregated selection of "lucuma_target_preferences"
"""
type lucuma_target_preferences_aggregate {
  aggregate: lucuma_target_preferences_aggregate_fields
  nodes: [lucuma_target_preferences!]!
}

"""
aggregate fields of "lucuma_target_preferences"
"""
type lucuma_target_preferences_aggregate_fields {
  avg: lucuma_target_preferences_avg_fields
  count(columns: [lucuma_target_preferences_select_column!], distinct: Boolean): Int
  max: lucuma_target_preferences_max_fields
  min: lucuma_target_preferences_min_fields
  stddev: lucuma_target_preferences_stddev_fields
  stddev_pop: lucuma_target_preferences_stddev_pop_fields
  stddev_samp: lucuma_target_preferences_stddev_samp_fields
  sum: lucuma_target_preferences_sum_fields
  var_pop: lucuma_target_preferences_var_pop_fields
  var_samp: lucuma_target_preferences_var_samp_fields
  variance: lucuma_target_preferences_variance_fields
}

"""
order by aggregate values of table "lucuma_target_preferences"
"""
input lucuma_target_preferences_aggregate_order_by {
  avg: lucuma_target_preferences_avg_order_by
  count: order_by
  max: lucuma_target_preferences_max_order_by
  min: lucuma_target_preferences_min_order_by
  stddev: lucuma_target_preferences_stddev_order_by
  stddev_pop: lucuma_target_preferences_stddev_pop_order_by
  stddev_samp: lucuma_target_preferences_stddev_samp_order_by
  sum: lucuma_target_preferences_sum_order_by
  var_pop: lucuma_target_preferences_var_pop_order_by
  var_samp: lucuma_target_preferences_var_samp_order_by
  variance: lucuma_target_preferences_variance_order_by
}

"""
input type for inserting array relation for remote table "lucuma_target_preferences"
"""
input lucuma_target_preferences_arr_rel_insert_input {
  data: [lucuma_target_preferences_insert_input!]!
  on_conflict: lucuma_target_preferences_on_conflict
}

"""aggregate avg on columns"""
type lucuma_target_preferences_avg_fields {
  fov: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by avg() on columns of table "lucuma_target_preferences"
"""
input lucuma_target_preferences_avg_order_by {
  fov: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""
Boolean expression to filter rows from the table "lucuma_target_preferences". All fields are combined with a logical 'AND'.
"""
input lucuma_target_preferences_bool_exp {
  _and: [lucuma_target_preferences_bool_exp]
  _not: lucuma_target_preferences_bool_exp
  _or: [lucuma_target_preferences_bool_exp]
  agsCandidates: Boolean_comparison_exp
  agsOverlay: Boolean_comparison_exp
  fov: bigint_comparison_exp
  lucuma_target: lucuma_target_bool_exp
  target_id: String_comparison_exp
  user_id: String_comparison_exp
  viewOffsetP: bigint_comparison_exp
  viewOffsetQ: bigint_comparison_exp
}

"""
unique or primary key constraints on table "lucuma_target_preferences"
"""
enum lucuma_target_preferences_constraint {
  """unique or primary key constraint"""
  lucuma_target_preferences_pkey
}

"""
input type for incrementing integer column in table "lucuma_target_preferences"
"""
input lucuma_target_preferences_inc_input {
  fov: bigint
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
input type for inserting data into table "lucuma_target_preferences"
"""
input lucuma_target_preferences_insert_input {
  agsCandidates: Boolean
  agsOverlay: Boolean
  fov: bigint
  lucuma_target: lucuma_target_obj_rel_insert_input
  target_id: String
  user_id: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""aggregate max on columns"""
type lucuma_target_preferences_max_fields {
  fov: bigint
  target_id: String
  user_id: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
order by max() on columns of table "lucuma_target_preferences"
"""
input lucuma_target_preferences_max_order_by {
  fov: order_by
  target_id: order_by
  user_id: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""aggregate min on columns"""
type lucuma_target_preferences_min_fields {
  fov: bigint
  target_id: String
  user_id: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
order by min() on columns of table "lucuma_target_preferences"
"""
input lucuma_target_preferences_min_order_by {
  fov: order_by
  target_id: order_by
  user_id: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""
response of any mutation on the table "lucuma_target_preferences"
"""
type lucuma_target_preferences_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [lucuma_target_preferences!]!
}

"""
input type for inserting object relation for remote table "lucuma_target_preferences"
"""
input lucuma_target_preferences_obj_rel_insert_input {
  data: lucuma_target_preferences_insert_input!
  on_conflict: lucuma_target_preferences_on_conflict
}

"""
on conflict condition type for table "lucuma_target_preferences"
"""
input lucuma_target_preferences_on_conflict {
  constraint: lucuma_target_preferences_constraint!
  update_columns: [lucuma_target_preferences_update_column!]!
  where: lucuma_target_preferences_bool_exp
}

"""
ordering options when selecting data from "lucuma_target_preferences"
"""
input lucuma_target_preferences_order_by {
  agsCandidates: order_by
  agsOverlay: order_by
  fov: order_by
  lucuma_target: lucuma_target_order_by
  target_id: order_by
  user_id: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""
primary key columns input for table: "lucuma_target_preferences"
"""
input lucuma_target_preferences_pk_columns_input {
  target_id: String!
  user_id: String!
}

"""
select columns of table "lucuma_target_preferences"
"""
enum lucuma_target_preferences_select_column {
  """column name"""
  agsCandidates

  """column name"""
  agsOverlay

  """column name"""
  fov

  """column name"""
  target_id

  """column name"""
  user_id

  """column name"""
  viewOffsetP

  """column name"""
  viewOffsetQ
}

"""
input type for updating data in table "lucuma_target_preferences"
"""
input lucuma_target_preferences_set_input {
  agsCandidates: Boolean
  agsOverlay: Boolean
  fov: bigint
  target_id: String
  user_id: String
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""aggregate stddev on columns"""
type lucuma_target_preferences_stddev_fields {
  fov: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by stddev() on columns of table "lucuma_target_preferences"
"""
input lucuma_target_preferences_stddev_order_by {
  fov: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""aggregate stddev_pop on columns"""
type lucuma_target_preferences_stddev_pop_fields {
  fov: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by stddev_pop() on columns of table "lucuma_target_preferences"
"""
input lucuma_target_preferences_stddev_pop_order_by {
  fov: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""aggregate stddev_samp on columns"""
type lucuma_target_preferences_stddev_samp_fields {
  fov: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by stddev_samp() on columns of table "lucuma_target_preferences"
"""
input lucuma_target_preferences_stddev_samp_order_by {
  fov: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""aggregate sum on columns"""
type lucuma_target_preferences_sum_fields {
  fov: bigint
  viewOffsetP: bigint
  viewOffsetQ: bigint
}

"""
order by sum() on columns of table "lucuma_target_preferences"
"""
input lucuma_target_preferences_sum_order_by {
  fov: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""
update columns of table "lucuma_target_preferences"
"""
enum lucuma_target_preferences_update_column {
  """column name"""
  agsCandidates

  """column name"""
  agsOverlay

  """column name"""
  fov

  """column name"""
  target_id

  """column name"""
  user_id

  """column name"""
  viewOffsetP

  """column name"""
  viewOffsetQ
}

"""aggregate var_pop on columns"""
type lucuma_target_preferences_var_pop_fields {
  fov: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by var_pop() on columns of table "lucuma_target_preferences"
"""
input lucuma_target_preferences_var_pop_order_by {
  fov: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""aggregate var_samp on columns"""
type lucuma_target_preferences_var_samp_fields {
  fov: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by var_samp() on columns of table "lucuma_target_preferences"
"""
input lucuma_target_preferences_var_samp_order_by {
  fov: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""aggregate variance on columns"""
type lucuma_target_preferences_variance_fields {
  fov: Float
  viewOffsetP: Float
  viewOffsetQ: Float
}

"""
order by variance() on columns of table "lucuma_target_preferences"
"""
input lucuma_target_preferences_variance_order_by {
  fov: order_by
  viewOffsetP: order_by
  viewOffsetQ: order_by
}

"""
select columns of table "lucuma_target"
"""
enum lucuma_target_select_column {
  """column name"""
  target_id
}

"""
input type for updating data in table "lucuma_target"
"""
input lucuma_target_set_input {
  target_id: String
}

"""
update columns of table "lucuma_target"
"""
enum lucuma_target_update_column {
  """column name"""
  target_id
}

"""
columns and relationships of "lucuma_user"
"""
type lucuma_user {
  user_id: String!
}

"""
aggregated selection of "lucuma_user"
"""
type lucuma_user_aggregate {
  aggregate: lucuma_user_aggregate_fields
  nodes: [lucuma_user!]!
}

"""
aggregate fields of "lucuma_user"
"""
type lucuma_user_aggregate_fields {
  count(columns: [lucuma_user_select_column!], distinct: Boolean): Int
  max: lucuma_user_max_fields
  min: lucuma_user_min_fields
}

"""
order by aggregate values of table "lucuma_user"
"""
input lucuma_user_aggregate_order_by {
  count: order_by
  max: lucuma_user_max_order_by
  min: lucuma_user_min_order_by
}

"""
input type for inserting array relation for remote table "lucuma_user"
"""
input lucuma_user_arr_rel_insert_input {
  data: [lucuma_user_insert_input!]!
  on_conflict: lucuma_user_on_conflict
}

"""
Boolean expression to filter rows from the table "lucuma_user". All fields are combined with a logical 'AND'.
"""
input lucuma_user_bool_exp {
  _and: [lucuma_user_bool_exp]
  _not: lucuma_user_bool_exp
  _or: [lucuma_user_bool_exp]
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "lucuma_user"
"""
enum lucuma_user_constraint {
  """unique or primary key constraint"""
  lucuma_user_pkey
}

"""
input type for inserting data into table "lucuma_user"
"""
input lucuma_user_insert_input {
  user_id: String
}

"""aggregate max on columns"""
type lucuma_user_max_fields {
  user_id: String
}

"""
order by max() on columns of table "lucuma_user"
"""
input lucuma_user_max_order_by {
  user_id: order_by
}

"""aggregate min on columns"""
type lucuma_user_min_fields {
  user_id: String
}

"""
order by min() on columns of table "lucuma_user"
"""
input lucuma_user_min_order_by {
  user_id: order_by
}

"""
response of any mutation on the table "lucuma_user"
"""
type lucuma_user_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [lucuma_user!]!
}

"""
input type for inserting object relation for remote table "lucuma_user"
"""
input lucuma_user_obj_rel_insert_input {
  data: lucuma_user_insert_input!
  on_conflict: lucuma_user_on_conflict
}

"""
on conflict condition type for table "lucuma_user"
"""
input lucuma_user_on_conflict {
  constraint: lucuma_user_constraint!
  update_columns: [lucuma_user_update_column!]!
  where: lucuma_user_bool_exp
}

"""
ordering options when selecting data from "lucuma_user"
"""
input lucuma_user_order_by {
  user_id: order_by
}

"""
primary key columns input for table: "lucuma_user"
"""
input lucuma_user_pk_columns_input {
  user_id: String!
}

"""
select columns of table "lucuma_user"
"""
enum lucuma_user_select_column {
  """column name"""
  user_id
}

"""
input type for updating data in table "lucuma_user"
"""
input lucuma_user_set_input {
  user_id: String
}

"""
update columns of table "lucuma_user"
"""
enum lucuma_user_update_column {
  """column name"""
  user_id
}

"""mutation root"""
type Mutation {
  """
  delete data from the table: "explore_resizable_width"
  """
  delete_explore_resizable_width(
    """filter the rows which have to be deleted"""
    where: explore_resizable_width_bool_exp!
  ): explore_resizable_width_mutation_response

  """
  delete single row from the table: "explore_resizable_width"
  """
  delete_explore_resizable_width_by_pk(section: resizable_area!, user_id: String!): explore_resizable_width

  """
  delete data from the table: "grid_layout_positions"
  """
  delete_grid_layout_positions(
    """filter the rows which have to be deleted"""
    where: grid_layout_positions_bool_exp!
  ): grid_layout_positions_mutation_response

  """
  delete single row from the table: "grid_layout_positions"
  """
  delete_grid_layout_positions_by_pk(breakpoint_name: breakpoint_name!, section: grid_layout_area!, tile: String!, user_id: String!): grid_layout_positions

  """
  delete data from the table: "lucuma_elevation_plot_preferences"
  """
  delete_lucuma_elevation_plot_preferences(
    """filter the rows which have to be deleted"""
    where: lucuma_elevation_plot_preferences_bool_exp!
  ): lucuma_elevation_plot_preferences_mutation_response

  """
  delete single row from the table: "lucuma_elevation_plot_preferences"
  """
  delete_lucuma_elevation_plot_preferences_by_pk(target_id: String!, user_id: String!): lucuma_elevation_plot_preferences

  """
  delete data from the table: "lucuma_target"
  """
  delete_lucuma_target(
    """filter the rows which have to be deleted"""
    where: lucuma_target_bool_exp!
  ): lucuma_target_mutation_response

  """
  delete single row from the table: "lucuma_target"
  """
  delete_lucuma_target_by_pk(target_id: String!): lucuma_target

  """
  delete data from the table: "lucuma_target_preferences"
  """
  delete_lucuma_target_preferences(
    """filter the rows which have to be deleted"""
    where: lucuma_target_preferences_bool_exp!
  ): lucuma_target_preferences_mutation_response

  """
  delete single row from the table: "lucuma_target_preferences"
  """
  delete_lucuma_target_preferences_by_pk(target_id: String!, user_id: String!): lucuma_target_preferences

  """
  delete data from the table: "lucuma_user"
  """
  delete_lucuma_user(
    """filter the rows which have to be deleted"""
    where: lucuma_user_bool_exp!
  ): lucuma_user_mutation_response

  """
  delete single row from the table: "lucuma_user"
  """
  delete_lucuma_user_by_pk(user_id: String!): lucuma_user

  """
  insert data into the table: "explore_resizable_width"
  """
  insert_explore_resizable_width(
    """the rows to be inserted"""
    objects: [explore_resizable_width_insert_input!]!

    """on conflict condition"""
    on_conflict: explore_resizable_width_on_conflict
  ): explore_resizable_width_mutation_response

  """
  insert a single row into the table: "explore_resizable_width"
  """
  insert_explore_resizable_width_one(
    """the row to be inserted"""
    object: explore_resizable_width_insert_input!

    """on conflict condition"""
    on_conflict: explore_resizable_width_on_conflict
  ): explore_resizable_width

  """
  insert data into the table: "grid_layout_positions"
  """
  insert_grid_layout_positions(
    """the rows to be inserted"""
    objects: [grid_layout_positions_insert_input!]!

    """on conflict condition"""
    on_conflict: grid_layout_positions_on_conflict
  ): grid_layout_positions_mutation_response

  """
  insert a single row into the table: "grid_layout_positions"
  """
  insert_grid_layout_positions_one(
    """the row to be inserted"""
    object: grid_layout_positions_insert_input!

    """on conflict condition"""
    on_conflict: grid_layout_positions_on_conflict
  ): grid_layout_positions

  """
  insert data into the table: "lucuma_elevation_plot_preferences"
  """
  insert_lucuma_elevation_plot_preferences(
    """the rows to be inserted"""
    objects: [lucuma_elevation_plot_preferences_insert_input!]!

    """on conflict condition"""
    on_conflict: lucuma_elevation_plot_preferences_on_conflict
  ): lucuma_elevation_plot_preferences_mutation_response

  """
  insert a single row into the table: "lucuma_elevation_plot_preferences"
  """
  insert_lucuma_elevation_plot_preferences_one(
    """the row to be inserted"""
    object: lucuma_elevation_plot_preferences_insert_input!

    """on conflict condition"""
    on_conflict: lucuma_elevation_plot_preferences_on_conflict
  ): lucuma_elevation_plot_preferences

  """
  insert data into the table: "lucuma_target"
  """
  insert_lucuma_target(
    """the rows to be inserted"""
    objects: [lucuma_target_insert_input!]!

    """on conflict condition"""
    on_conflict: lucuma_target_on_conflict
  ): lucuma_target_mutation_response

  """
  insert a single row into the table: "lucuma_target"
  """
  insert_lucuma_target_one(
    """the row to be inserted"""
    object: lucuma_target_insert_input!

    """on conflict condition"""
    on_conflict: lucuma_target_on_conflict
  ): lucuma_target

  """
  insert data into the table: "lucuma_target_preferences"
  """
  insert_lucuma_target_preferences(
    """the rows to be inserted"""
    objects: [lucuma_target_preferences_insert_input!]!

    """on conflict condition"""
    on_conflict: lucuma_target_preferences_on_conflict
  ): lucuma_target_preferences_mutation_response

  """
  insert a single row into the table: "lucuma_target_preferences"
  """
  insert_lucuma_target_preferences_one(
    """the row to be inserted"""
    object: lucuma_target_preferences_insert_input!

    """on conflict condition"""
    on_conflict: lucuma_target_preferences_on_conflict
  ): lucuma_target_preferences

  """
  insert data into the table: "lucuma_user"
  """
  insert_lucuma_user(
    """the rows to be inserted"""
    objects: [lucuma_user_insert_input!]!

    """on conflict condition"""
    on_conflict: lucuma_user_on_conflict
  ): lucuma_user_mutation_response

  """
  insert a single row into the table: "lucuma_user"
  """
  insert_lucuma_user_one(
    """the row to be inserted"""
    object: lucuma_user_insert_input!

    """on conflict condition"""
    on_conflict: lucuma_user_on_conflict
  ): lucuma_user

  """
  update data of the table: "explore_resizable_width"
  """
  update_explore_resizable_width(
    """increments the integer columns with given value of the filtered values"""
    _inc: explore_resizable_width_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: explore_resizable_width_set_input

    """filter the rows which have to be updated"""
    where: explore_resizable_width_bool_exp!
  ): explore_resizable_width_mutation_response

  """
  update single row of the table: "explore_resizable_width"
  """
  update_explore_resizable_width_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: explore_resizable_width_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: explore_resizable_width_set_input
    pk_columns: explore_resizable_width_pk_columns_input!
  ): explore_resizable_width

  """
  update data of the table: "grid_layout_positions"
  """
  update_grid_layout_positions(
    """increments the integer columns with given value of the filtered values"""
    _inc: grid_layout_positions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: grid_layout_positions_set_input

    """filter the rows which have to be updated"""
    where: grid_layout_positions_bool_exp!
  ): grid_layout_positions_mutation_response

  """
  update single row of the table: "grid_layout_positions"
  """
  update_grid_layout_positions_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: grid_layout_positions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: grid_layout_positions_set_input
    pk_columns: grid_layout_positions_pk_columns_input!
  ): grid_layout_positions

  """
  update data of the table: "lucuma_elevation_plot_preferences"
  """
  update_lucuma_elevation_plot_preferences(
    """sets the columns of the filtered rows to the given values"""
    _set: lucuma_elevation_plot_preferences_set_input

    """filter the rows which have to be updated"""
    where: lucuma_elevation_plot_preferences_bool_exp!
  ): lucuma_elevation_plot_preferences_mutation_response

  """
  update single row of the table: "lucuma_elevation_plot_preferences"
  """
  update_lucuma_elevation_plot_preferences_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: lucuma_elevation_plot_preferences_set_input
    pk_columns: lucuma_elevation_plot_preferences_pk_columns_input!
  ): lucuma_elevation_plot_preferences

  """
  update data of the table: "lucuma_target"
  """
  update_lucuma_target(
    """sets the columns of the filtered rows to the given values"""
    _set: lucuma_target_set_input

    """filter the rows which have to be updated"""
    where: lucuma_target_bool_exp!
  ): lucuma_target_mutation_response

  """
  update single row of the table: "lucuma_target"
  """
  update_lucuma_target_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: lucuma_target_set_input
    pk_columns: lucuma_target_pk_columns_input!
  ): lucuma_target

  """
  update data of the table: "lucuma_target_preferences"
  """
  update_lucuma_target_preferences(
    """increments the integer columns with given value of the filtered values"""
    _inc: lucuma_target_preferences_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lucuma_target_preferences_set_input

    """filter the rows which have to be updated"""
    where: lucuma_target_preferences_bool_exp!
  ): lucuma_target_preferences_mutation_response

  """
  update single row of the table: "lucuma_target_preferences"
  """
  update_lucuma_target_preferences_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: lucuma_target_preferences_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lucuma_target_preferences_set_input
    pk_columns: lucuma_target_preferences_pk_columns_input!
  ): lucuma_target_preferences

  """
  update data of the table: "lucuma_user"
  """
  update_lucuma_user(
    """sets the columns of the filtered rows to the given values"""
    _set: lucuma_user_set_input

    """filter the rows which have to be updated"""
    where: lucuma_user_bool_exp!
  ): lucuma_user_mutation_response

  """
  update single row of the table: "lucuma_user"
  """
  update_lucuma_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: lucuma_user_set_input
    pk_columns: lucuma_user_pk_columns_input!
  ): lucuma_user
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type Query {
  """
  fetch data from the table: "explore_resizable_width"
  """
  explore_resizable_width(
    """distinct select on columns"""
    distinct_on: [explore_resizable_width_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [explore_resizable_width_order_by!]

    """filter the rows returned"""
    where: explore_resizable_width_bool_exp
  ): [explore_resizable_width!]!

  """
  fetch aggregated fields from the table: "explore_resizable_width"
  """
  explore_resizable_width_aggregate(
    """distinct select on columns"""
    distinct_on: [explore_resizable_width_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [explore_resizable_width_order_by!]

    """filter the rows returned"""
    where: explore_resizable_width_bool_exp
  ): explore_resizable_width_aggregate!

  """
  fetch data from the table: "explore_resizable_width" using primary key columns
  """
  explore_resizable_width_by_pk(section: resizable_area!, user_id: String!): explore_resizable_width

  """
  fetch data from the table: "grid_layout_positions"
  """
  grid_layout_positions(
    """distinct select on columns"""
    distinct_on: [grid_layout_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [grid_layout_positions_order_by!]

    """filter the rows returned"""
    where: grid_layout_positions_bool_exp
  ): [grid_layout_positions!]!

  """
  fetch aggregated fields from the table: "grid_layout_positions"
  """
  grid_layout_positions_aggregate(
    """distinct select on columns"""
    distinct_on: [grid_layout_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [grid_layout_positions_order_by!]

    """filter the rows returned"""
    where: grid_layout_positions_bool_exp
  ): grid_layout_positions_aggregate!

  """
  fetch data from the table: "grid_layout_positions" using primary key columns
  """
  grid_layout_positions_by_pk(breakpoint_name: breakpoint_name!, section: grid_layout_area!, tile: String!, user_id: String!): grid_layout_positions

  """
  fetch data from the table: "lucuma_elevation_plot_preferences"
  """
  lucuma_elevation_plot_preferences(
    """distinct select on columns"""
    distinct_on: [lucuma_elevation_plot_preferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_elevation_plot_preferences_order_by!]

    """filter the rows returned"""
    where: lucuma_elevation_plot_preferences_bool_exp
  ): [lucuma_elevation_plot_preferences!]!

  """
  fetch aggregated fields from the table: "lucuma_elevation_plot_preferences"
  """
  lucuma_elevation_plot_preferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucuma_elevation_plot_preferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_elevation_plot_preferences_order_by!]

    """filter the rows returned"""
    where: lucuma_elevation_plot_preferences_bool_exp
  ): lucuma_elevation_plot_preferences_aggregate!

  """
  fetch data from the table: "lucuma_elevation_plot_preferences" using primary key columns
  """
  lucuma_elevation_plot_preferences_by_pk(target_id: String!, user_id: String!): lucuma_elevation_plot_preferences

  """
  fetch data from the table: "lucuma_target"
  """
  lucuma_target(
    """distinct select on columns"""
    distinct_on: [lucuma_target_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_target_order_by!]

    """filter the rows returned"""
    where: lucuma_target_bool_exp
  ): [lucuma_target!]!

  """
  fetch aggregated fields from the table: "lucuma_target"
  """
  lucuma_target_aggregate(
    """distinct select on columns"""
    distinct_on: [lucuma_target_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_target_order_by!]

    """filter the rows returned"""
    where: lucuma_target_bool_exp
  ): lucuma_target_aggregate!

  """fetch data from the table: "lucuma_target" using primary key columns"""
  lucuma_target_by_pk(target_id: String!): lucuma_target

  """
  fetch data from the table: "lucuma_target_preferences"
  """
  lucuma_target_preferences(
    """distinct select on columns"""
    distinct_on: [lucuma_target_preferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_target_preferences_order_by!]

    """filter the rows returned"""
    where: lucuma_target_preferences_bool_exp
  ): [lucuma_target_preferences!]!

  """
  fetch aggregated fields from the table: "lucuma_target_preferences"
  """
  lucuma_target_preferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucuma_target_preferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_target_preferences_order_by!]

    """filter the rows returned"""
    where: lucuma_target_preferences_bool_exp
  ): lucuma_target_preferences_aggregate!

  """
  fetch data from the table: "lucuma_target_preferences" using primary key columns
  """
  lucuma_target_preferences_by_pk(target_id: String!, user_id: String!): lucuma_target_preferences

  """
  fetch data from the table: "lucuma_user"
  """
  lucuma_user(
    """distinct select on columns"""
    distinct_on: [lucuma_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_user_order_by!]

    """filter the rows returned"""
    where: lucuma_user_bool_exp
  ): [lucuma_user!]!

  """
  fetch aggregated fields from the table: "lucuma_user"
  """
  lucuma_user_aggregate(
    """distinct select on columns"""
    distinct_on: [lucuma_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_user_order_by!]

    """filter the rows returned"""
    where: lucuma_user_bool_exp
  ): lucuma_user_aggregate!

  """fetch data from the table: "lucuma_user" using primary key columns"""
  lucuma_user_by_pk(user_id: String!): lucuma_user
}

scalar resizable_area

"""
expression to compare columns of type resizable_area. All fields are combined with logical 'AND'.
"""
input resizable_area_comparison_exp {
  _eq: resizable_area
  _gt: resizable_area
  _gte: resizable_area
  _in: [resizable_area!]
  _is_null: Boolean
  _lt: resizable_area
  _lte: resizable_area
  _neq: resizable_area
  _nin: [resizable_area!]
}

scalar site

"""
expression to compare columns of type site. All fields are combined with logical 'AND'.
"""
input site_comparison_exp {
  _eq: site
  _gt: site
  _gte: site
  _in: [site!]
  _is_null: Boolean
  _lt: site
  _lte: site
  _neq: site
  _nin: [site!]
}

"""subscription root"""
type Subscription {
  """
  fetch data from the table: "explore_resizable_width"
  """
  explore_resizable_width(
    """distinct select on columns"""
    distinct_on: [explore_resizable_width_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [explore_resizable_width_order_by!]

    """filter the rows returned"""
    where: explore_resizable_width_bool_exp
  ): [explore_resizable_width!]!

  """
  fetch aggregated fields from the table: "explore_resizable_width"
  """
  explore_resizable_width_aggregate(
    """distinct select on columns"""
    distinct_on: [explore_resizable_width_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [explore_resizable_width_order_by!]

    """filter the rows returned"""
    where: explore_resizable_width_bool_exp
  ): explore_resizable_width_aggregate!

  """
  fetch data from the table: "explore_resizable_width" using primary key columns
  """
  explore_resizable_width_by_pk(section: resizable_area!, user_id: String!): explore_resizable_width

  """
  fetch data from the table: "grid_layout_positions"
  """
  grid_layout_positions(
    """distinct select on columns"""
    distinct_on: [grid_layout_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [grid_layout_positions_order_by!]

    """filter the rows returned"""
    where: grid_layout_positions_bool_exp
  ): [grid_layout_positions!]!

  """
  fetch aggregated fields from the table: "grid_layout_positions"
  """
  grid_layout_positions_aggregate(
    """distinct select on columns"""
    distinct_on: [grid_layout_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [grid_layout_positions_order_by!]

    """filter the rows returned"""
    where: grid_layout_positions_bool_exp
  ): grid_layout_positions_aggregate!

  """
  fetch data from the table: "grid_layout_positions" using primary key columns
  """
  grid_layout_positions_by_pk(breakpoint_name: breakpoint_name!, section: grid_layout_area!, tile: String!, user_id: String!): grid_layout_positions

  """
  fetch data from the table: "lucuma_elevation_plot_preferences"
  """
  lucuma_elevation_plot_preferences(
    """distinct select on columns"""
    distinct_on: [lucuma_elevation_plot_preferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_elevation_plot_preferences_order_by!]

    """filter the rows returned"""
    where: lucuma_elevation_plot_preferences_bool_exp
  ): [lucuma_elevation_plot_preferences!]!

  """
  fetch aggregated fields from the table: "lucuma_elevation_plot_preferences"
  """
  lucuma_elevation_plot_preferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucuma_elevation_plot_preferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_elevation_plot_preferences_order_by!]

    """filter the rows returned"""
    where: lucuma_elevation_plot_preferences_bool_exp
  ): lucuma_elevation_plot_preferences_aggregate!

  """
  fetch data from the table: "lucuma_elevation_plot_preferences" using primary key columns
  """
  lucuma_elevation_plot_preferences_by_pk(target_id: String!, user_id: String!): lucuma_elevation_plot_preferences

  """
  fetch data from the table: "lucuma_target"
  """
  lucuma_target(
    """distinct select on columns"""
    distinct_on: [lucuma_target_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_target_order_by!]

    """filter the rows returned"""
    where: lucuma_target_bool_exp
  ): [lucuma_target!]!

  """
  fetch aggregated fields from the table: "lucuma_target"
  """
  lucuma_target_aggregate(
    """distinct select on columns"""
    distinct_on: [lucuma_target_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_target_order_by!]

    """filter the rows returned"""
    where: lucuma_target_bool_exp
  ): lucuma_target_aggregate!

  """fetch data from the table: "lucuma_target" using primary key columns"""
  lucuma_target_by_pk(target_id: String!): lucuma_target

  """
  fetch data from the table: "lucuma_target_preferences"
  """
  lucuma_target_preferences(
    """distinct select on columns"""
    distinct_on: [lucuma_target_preferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_target_preferences_order_by!]

    """filter the rows returned"""
    where: lucuma_target_preferences_bool_exp
  ): [lucuma_target_preferences!]!

  """
  fetch aggregated fields from the table: "lucuma_target_preferences"
  """
  lucuma_target_preferences_aggregate(
    """distinct select on columns"""
    distinct_on: [lucuma_target_preferences_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_target_preferences_order_by!]

    """filter the rows returned"""
    where: lucuma_target_preferences_bool_exp
  ): lucuma_target_preferences_aggregate!

  """
  fetch data from the table: "lucuma_target_preferences" using primary key columns
  """
  lucuma_target_preferences_by_pk(target_id: String!, user_id: String!): lucuma_target_preferences

  """
  fetch data from the table: "lucuma_user"
  """
  lucuma_user(
    """distinct select on columns"""
    distinct_on: [lucuma_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_user_order_by!]

    """filter the rows returned"""
    where: lucuma_user_bool_exp
  ): [lucuma_user!]!

  """
  fetch aggregated fields from the table: "lucuma_user"
  """
  lucuma_user_aggregate(
    """distinct select on columns"""
    distinct_on: [lucuma_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lucuma_user_order_by!]

    """filter the rows returned"""
    where: lucuma_user_bool_exp
  ): lucuma_user_aggregate!

  """fetch data from the table: "lucuma_user" using primary key columns"""
  lucuma_user_by_pk(user_id: String!): lucuma_user
}

